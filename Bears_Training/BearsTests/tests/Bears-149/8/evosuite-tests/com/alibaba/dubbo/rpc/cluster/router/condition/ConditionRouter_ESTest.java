/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 10 20:04:15 GMT 2019
 */

package com.alibaba.dubbo.rpc.cluster.router.condition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.dubbo.common.URL;
import com.alibaba.dubbo.rpc.Invocation;
import com.alibaba.dubbo.rpc.Invoker;
import com.alibaba.dubbo.rpc.InvokerListener;
import com.alibaba.dubbo.rpc.RpcInvocation;
import com.alibaba.dubbo.rpc.cluster.Router;
import com.alibaba.dubbo.rpc.cluster.router.MockInvokersSelector;
import com.alibaba.dubbo.rpc.cluster.router.condition.ConditionRouter;
import com.alibaba.dubbo.rpc.listener.ListenerInvokerWrapper;
import com.alibaba.dubbo.rpc.protocol.InvokerWrapper;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConditionRouter_ESTest extends ConditionRouter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "rule";
      stringArray0[1] = "rule";
      URL uRL0 = new URL("rule", "rule", 47, "rule", stringArray0);
      URL uRL1 = uRL0.setProtocol(stringArray0[6]);
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL0);
      RpcInvocation rpcInvocation0 = new RpcInvocation();
      LinkedList<Invoker<String>> linkedList0 = new LinkedList<Invoker<String>>();
      InvokerWrapper<String> invokerWrapper0 = new InvokerWrapper<String>((Invoker<String>) null, uRL0);
      LinkedList<InvokerListener> linkedList1 = new LinkedList<InvokerListener>();
      ListenerInvokerWrapper<String> listenerInvokerWrapper0 = new ListenerInvokerWrapper<String>(invokerWrapper0, linkedList1);
      linkedList0.add((Invoker<String>) listenerInvokerWrapper0);
      List<Invoker<String>> list0 = conditionRouter0.route((List<Invoker<String>>) linkedList0, uRL1, (Invocation) rpcInvocation0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[4] = "rule";
      stringArray0[5] = "0#nPidyHK*";
      URL uRL0 = new URL("rule", "rule", 47, "0#nPidyHK*", stringArray0);
      URL uRL1 = uRL0.addParameter("0#nPidyHK*", "rule");
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL0);
      RpcInvocation rpcInvocation0 = new RpcInvocation();
      LinkedList<Invoker<String>> linkedList0 = new LinkedList<Invoker<String>>();
      InvokerWrapper<String> invokerWrapper0 = new InvokerWrapper<String>((Invoker<String>) null, uRL1);
      LinkedList<InvokerListener> linkedList1 = new LinkedList<InvokerListener>();
      ListenerInvokerWrapper<String> listenerInvokerWrapper0 = new ListenerInvokerWrapper<String>(invokerWrapper0, linkedList1);
      linkedList0.add((Invoker<String>) listenerInvokerWrapper0);
      List<Invoker<String>> list0 = conditionRouter0.route((List<Invoker<String>>) linkedList0, uRL1, (Invocation) rpcInvocation0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "rule";
      stringArray0[1] = "0#nPidyHK*";
      URL uRL0 = new URL("rule", "rule", 47, "0#nPidyHK*", stringArray0);
      URL uRL1 = uRL0.setHost("sIKY16@Xx`'t6;Ve");
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL0);
      RpcInvocation rpcInvocation0 = new RpcInvocation();
      LinkedList<Invoker<String>> linkedList0 = new LinkedList<Invoker<String>>();
      InvokerWrapper<String> invokerWrapper0 = new InvokerWrapper<String>((Invoker<String>) null, uRL1);
      LinkedList<InvokerListener> linkedList1 = new LinkedList<InvokerListener>();
      ListenerInvokerWrapper<String> listenerInvokerWrapper0 = new ListenerInvokerWrapper<String>(invokerWrapper0, linkedList1);
      linkedList0.add((Invoker<String>) listenerInvokerWrapper0);
      List<Invoker<String>> list0 = conditionRouter0.route((List<Invoker<String>>) linkedList0, uRL0, (Invocation) rpcInvocation0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "rule";
      stringArray0[2] = "0#nPidyHK*";
      stringArray0[4] = "rule";
      stringArray0[6] = "rule";
      stringArray0[7] = "0#nPidyHK*";
      URL uRL0 = new URL("rule", "rule", 47, "0#nPidyHK*", stringArray0);
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL0);
      ConditionRouter conditionRouter1 = new ConditionRouter(uRL0);
      int int0 = conditionRouter0.compareTo((Router) conditionRouter1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "rule";
      stringArray0[1] = "0#nPidyHK*";
      URL uRL0 = new URL("rule", "rule", 47, "0#nPidyHK*", stringArray0);
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL0);
      ConditionRouter conditionRouter1 = new ConditionRouter(uRL0);
      // Undeclared exception!
      try { 
        conditionRouter0.compareTo((Router) conditionRouter1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "rule";
      stringArray0[1] = "0#nPidyHK*";
      URL uRL0 = new URL("rule", "rule", (-2134), "0#nPidyHK*", stringArray0);
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL0);
      URL uRL1 = conditionRouter0.getUrl();
      assertEquals("rule", uRL1.getHost());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[4] = "rule";
      stringArray0[5] = "rule";
      URL uRL0 = new URL("rule", "rule", 47, "rule", stringArray0);
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL0);
      RpcInvocation rpcInvocation0 = new RpcInvocation();
      LinkedList<Invoker<String>> linkedList0 = new LinkedList<Invoker<String>>();
      linkedList0.add((Invoker<String>) null);
      // Undeclared exception!
      try { 
        conditionRouter0.route((List<Invoker<String>>) linkedList0, uRL0, (Invocation) rpcInvocation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConditionRouter conditionRouter0 = null;
      try {
        conditionRouter0 = new ConditionRouter((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.dubbo.rpc.cluster.router.condition.ConditionRouter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[4] = "rule";
      stringArray0[5] = "\"<%,WB')Yzx6eW";
      URL uRL0 = new URL("rule", "rule", 58, "\"<%,WB')Yzx6eW", stringArray0);
      ConditionRouter conditionRouter0 = null;
      try {
        conditionRouter0 = new ConditionRouter(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URLDecoder: Illegal hex characters in escape (%) pattern - For input string: \",W\"
         //
         verifyException("java.net.URLDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[4] = "rule";
      stringArray0[5] = "t=>";
      URL uRL0 = new URL("rule", "rule", 58, "t=>", stringArray0);
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 6);
      RpcInvocation rpcInvocation0 = new RpcInvocation("rule", classArray0, stringArray0);
      boolean boolean0 = conditionRouter0.matchWhen(uRL0, rpcInvocation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[4] = "rule";
      stringArray0[5] = "0#nPidyHK*";
      URL uRL0 = new URL("rule", "rule", 47, "0#nPidyHK*", stringArray0);
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL0);
      MockInvokersSelector mockInvokersSelector0 = new MockInvokersSelector();
      int int0 = conditionRouter0.compareTo((Router) mockInvokersSelector0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[4] = "rule";
      stringArray0[5] = "}Mbp?h]gRf&:~Z";
      URL uRL0 = new URL("rule", "rule", 47, "}Mbp?h]gRf&:~Z", stringArray0);
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL0);
      // Undeclared exception!
      try { 
        conditionRouter0.compareTo((Router) conditionRouter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[4] = "rule";
      stringArray0[5] = "rule";
      URL uRL0 = new URL("rule", "rule", 47, "rule", stringArray0);
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL0);
      int int0 = conditionRouter0.compareTo((Router) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[4] = "rule";
      stringArray0[5] = "}Mbp?h]gRf&:~Z";
      URL uRL0 = new URL("rule", "rule", 47, "}Mbp?h]gRf&:~Z", stringArray0);
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL0);
      RpcInvocation rpcInvocation0 = new RpcInvocation();
      LinkedList<Invoker<String>> linkedList0 = new LinkedList<Invoker<String>>();
      List<Invoker<String>> list0 = conditionRouter0.route((List<Invoker<String>>) linkedList0, uRL0, (Invocation) rpcInvocation0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[4] = "rule";
      stringArray0[5] = "0#nPidyHK*";
      URL uRL0 = new URL("rule", "rule", 47, "0#nPidyHK*", stringArray0);
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL0);
      RpcInvocation rpcInvocation0 = new RpcInvocation();
      List<Invoker<AbstractMap.SimpleEntry<Integer, Object>>> list0 = conditionRouter0.route((List<Invoker<AbstractMap.SimpleEntry<Integer, Object>>>) null, uRL0, (Invocation) rpcInvocation0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = ",|w'j&fyY3v-";
      stringArray0[0] = "rule";
      URL uRL0 = new URL("rule", "rule", 52, ",|w'j&fyY3v-", stringArray0);
      ConditionRouter conditionRouter0 = null;
      try {
        conditionRouter0 = new ConditionRouter(uRL0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal route rule \",|w'j&fyY3v-\", The error char ',' at index 0 before \"|w'j\".
         //
         verifyException("com.alibaba.dubbo.rpc.cluster.router.condition.ConditionRouter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[4] = "rule";
      stringArray0[5] = "@z777CL=.";
      URL uRL0 = new URL("rule", "rule", 47, "@z777CL=.", stringArray0);
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[4] = "rule";
      stringArray0[5] = "!;=";
      URL uRL0 = new URL("rule", "rule", 47, "!;=", stringArray0);
      ConditionRouter conditionRouter0 = null;
      try {
        conditionRouter0 = new ConditionRouter(uRL0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Illegal route rule \"!;=\", The error char '!' at index 0 before \";\".
         //
         verifyException("com.alibaba.dubbo.rpc.cluster.router.condition.ConditionRouter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[4] = "rule";
      stringArray0[5] = "!=";
      URL uRL0 = new URL("rule", "rule", 47, "!=", stringArray0);
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL0);
      RpcInvocation rpcInvocation0 = new RpcInvocation();
      LinkedList<Invoker<String>> linkedList0 = new LinkedList<Invoker<String>>();
      InvokerWrapper<String> invokerWrapper0 = new InvokerWrapper<String>((Invoker<String>) null, uRL0);
      LinkedList<InvokerListener> linkedList1 = new LinkedList<InvokerListener>();
      ListenerInvokerWrapper<String> listenerInvokerWrapper0 = new ListenerInvokerWrapper<String>(invokerWrapper0, linkedList1);
      linkedList0.add((Invoker<String>) listenerInvokerWrapper0);
      List<Invoker<String>> list0 = conditionRouter0.route((List<Invoker<String>>) linkedList0, uRL0, (Invocation) rpcInvocation0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      URL uRL0 = new URL("n", "n", 1075);
      ConditionRouter conditionRouter0 = null;
      try {
        conditionRouter0 = new ConditionRouter(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal route rule!
         //
         verifyException("com.alibaba.dubbo.rpc.cluster.router.condition.ConditionRouter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "rule";
      stringArray0[1] = "false";
      URL uRL0 = new URL("rule", "rule", 47, "false", stringArray0);
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL0);
      URL uRL1 = conditionRouter0.getUrl();
      assertEquals("rule", uRL1.getProtocol());
  }
}
