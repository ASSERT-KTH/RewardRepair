18	LONGEST_COMMON_SUBSEQUENCE	failcompile	return  a.charAt(0)  +  longest_common_subsequence(longest_common_subsequence(a.substring(1),  b));	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));
18	LONGEST_COMMON_SUBSEQUENCE	identical	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));
18	LONGEST_COMMON_SUBSEQUENCE	failcompile	if  (a.length()  >  0)  return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b);	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));
18	LONGEST_COMMON_SUBSEQUENCE	failcompile	if  (a.length()  >  0)  {  return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b);  }	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));
18	LONGEST_COMMON_SUBSEQUENCE	failcompile	if  (a.length()  >  b.length())  return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b);	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));
18	LONGEST_COMMON_SUBSEQUENCE	failcompile	return  a.charAt(0)  +  longest_common_subsequence(longest_common_subsequence(a.substring(1),  b);	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));
18	LONGEST_COMMON_SUBSEQUENCE	successcompile	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.toLowerCase());	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));
18	LONGEST_COMMON_SUBSEQUENCE	failcompile	return  a.charAt(0)  +  longest_common_subsequence(a.substring(0,  b));	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));
18	LONGEST_COMMON_SUBSEQUENCE	failcompile	char  char  =  longest_common_subsequence(a.substring(1),  b);  return  a.charAt(0)  +  char.charAt(0);	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));
18	LONGEST_COMMON_SUBSEQUENCE	successcompile	return  a.charAt(1)  +  longest_common_subsequence(a.substring(1),  b);	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));
18	LONGEST_COMMON_SUBSEQUENCE	failcompile	if  (a.isEmpty())  {  return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b);  }	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));
18	LONGEST_COMMON_SUBSEQUENCE	successcompile	return  a.charAt(0)  +  longest_common_subsequence(a.substring(2),  b);	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));
18	LONGEST_COMMON_SUBSEQUENCE	failcompile	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1));	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));
18	LONGEST_COMMON_SUBSEQUENCE	failcompile	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.charAt(0));	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));
18	LONGEST_COMMON_SUBSEQUENCE	successcompile	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b).trim();	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));
18	LONGEST_COMMON_SUBSEQUENCE	failcompile	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b,  a.length());	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));
18	LONGEST_COMMON_SUBSEQUENCE	successcompile	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(2));	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));
18	LONGEST_COMMON_SUBSEQUENCE	successcompile	return  a.charAt(0)  +  longest_common_subsequence(a,  b);	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));
18	LONGEST_COMMON_SUBSEQUENCE	failcompile	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.length());	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));
18	LONGEST_COMMON_SUBSEQUENCE	failcompile	char  c  =  longest_common_subsequence(a.substring(1),  b);  return  a.charAt(0)  +  c.charAt(0);	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));
18	LONGEST_COMMON_SUBSEQUENCE	successcompile	String  snd  =  longest_common_subsequence(a.substring(1),  b);  return  a.charAt(0)  +  snd.substring(1);	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));
18	LONGEST_COMMON_SUBSEQUENCE	failcompile	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.charAt(1));	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));
18	LONGEST_COMMON_SUBSEQUENCE	failcompile	.charAt(0)  +  longest_common_subsequence(a.substring(1),  b);	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));
18	LONGEST_COMMON_SUBSEQUENCE	failcompile	snd  =  longest_common_subsequence(a.substring(1),  b);  return  a.charAt(0)  +  snd;	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));
18	LONGEST_COMMON_SUBSEQUENCE	successcompile	return  a.charAt(0)  +  longest_common_subsequence(a.substring(3),  b);	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));
18	LONGEST_COMMON_SUBSEQUENCE	successcompile	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1).trim());	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));
18	LONGEST_COMMON_SUBSEQUENCE	failcompile	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b,  b);	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));
18	LONGEST_COMMON_SUBSEQUENCE	failcompile	char  char  =  longest_common_subsequence(a.substring(1),  b);  return  a.charAt(0);	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));
18	LONGEST_COMMON_SUBSEQUENCE	successcompile	return  longest_common_subsequence(a.substring(1),  b);	return  a.charAt(0)  +  longest_common_subsequence(a.substring(1),  b.substring(1));
22	NEXT_PERMUTATION	successcompile	if  (perm.get(j)  <  perm.get(i+1))  {	if  (perm.get(j)  >  perm.get(i))  {
22	NEXT_PERMUTATION	successcompile	if  (perm.get(j)  <  perm.get(j))  {	if  (perm.get(j)  >  perm.get(i))  {
22	NEXT_PERMUTATION	successcompile	if  (perm.get(j)  <  perm.get(j+1))  {	if  (perm.get(j)  >  perm.get(i))  {
22	NEXT_PERMUTATION	successcompile	if  (perm.get(j)  <  perm.get(i+1))  {	if  (perm.get(j)  >  perm.get(i))  {
22	NEXT_PERMUTATION	successcompile	if  (perm.get(j)  <  perm.get(j))  {	if  (perm.get(j)  >  perm.get(i))  {
22	NEXT_PERMUTATION	successcompile	if  (perm.get(j)  <  perm.get(j+1))  {	if  (perm.get(j)  >  perm.get(i))  {
22	NEXT_PERMUTATION	failcompile	if  (next_perm.get(j)  <  perm.get(i+1))  {	if  (perm.get(j)  >  perm.get(i))  {
22	NEXT_PERMUTATION	successcompile	if  (perm.get(i)  <  perm.get(i+1))  {	if  (perm.get(j)  >  perm.get(i))  {
22	NEXT_PERMUTATION	successcompile	if  (perm.get(j)  <  perm.get(j)  &&  perm.size()>0)  {	if  (perm.get(j)  >  perm.get(i))  {
22	NEXT_PERMUTATION	successcompile	if  (perm.get(j)  <  perm.get(j)  &&  perm.size()  >  i)  {	if  (perm.get(j)  >  perm.get(i))  {
22	NEXT_PERMUTATION	failcompile	if  (perm.get(j)  <  perm.get(j)  ||  perm.get(i+1))  {	if  (perm.get(j)  >  perm.get(i))  {
22	NEXT_PERMUTATION	successcompile	if  (perm.get(j)  >  perm.get(i+1))  {	if  (perm.get(j)  >  perm.get(i))  {
22	NEXT_PERMUTATION	successcompile	if  (perm.get(j)  <  perm.get(j-1))  {	if  (perm.get(j)  >  perm.get(i))  {
22	NEXT_PERMUTATION	successcompile	if  (perm.get(j)  <  perm.get(j)  +  1)  {	if  (perm.get(j)  >  perm.get(i))  {
22	NEXT_PERMUTATION	successcompile	if  (perm.get(j)  <  perm.get(j  +  1))  {	if  (perm.get(j)  >  perm.get(i))  {
22	NEXT_PERMUTATION	successcompile	if  (perm.get(j)  <  perm.get(i))  {	if  (perm.get(j)  >  perm.get(i))  {
22	NEXT_PERMUTATION	successcompile	if  (perm.get(i+1)  <  perm.get(i))  {	if  (perm.get(j)  >  perm.get(i))  {
22	NEXT_PERMUTATION	failcompile	if  (perm.get(j)  <  perm.get(j)  ||  perm.get(j+1))  {	if  (perm.get(j)  >  perm.get(i))  {
22	NEXT_PERMUTATION	successcompile	if  (perm.get(i+1)  <  perm.get(j))  {	if  (perm.get(j)  >  perm.get(i))  {
22	NEXT_PERMUTATION	successcompile	if  (perm.get(i+1)  <  perm.get(i+1))  {	if  (perm.get(j)  >  perm.get(i))  {
22	NEXT_PERMUTATION	successcompile	if  (perm.get(j)  <  perm.get(i  +  1))  {	if  (perm.get(j)  >  perm.get(i))  {
22	NEXT_PERMUTATION	successcompile	if  (perm.get(j)  <  perm.get(i))  {	if  (perm.get(j)  >  perm.get(i))  {
22	NEXT_PERMUTATION	successcompile	if  (perm.get(j)  <  perm.get(j)+1)  {	if  (perm.get(j)  >  perm.get(i))  {
22	NEXT_PERMUTATION	identical	if  (perm.get(j)  >  perm.get(i))  {	if  (perm.get(j)  >  perm.get(i))  {
22	NEXT_PERMUTATION	successcompile	if  (perm.get(j)  <  perm.get(j)-1)  {	if  (perm.get(j)  >  perm.get(i))  {
22	NEXT_PERMUTATION	successcompile	if  (perm.get(j)  <  perm.get(j-1))  {	if  (perm.get(j)  >  perm.get(i))  {
22	NEXT_PERMUTATION	failcompile	if  (next_perm.get(j)  <  perm.get(i))  {	if  (perm.get(j)  >  perm.get(i))  {
22	NEXT_PERMUTATION	successcompile	if  (perm.get(i)  <  perm.get(i))  {	if  (perm.get(j)  >  perm.get(i))  {
22	NEXT_PERMUTATION	successcompile	if  (j  <  perm.get(i+1))  {	if  (perm.get(j)  >  perm.get(i))  {
22	NEXT_PERMUTATION	successcompile	if  (i  <  perm.get(j))  {	if  (perm.get(j)  >  perm.get(i))  {
30	SHORTEST_PATHS	successcompile	weight_by_edge.put(edge,  update_weight);	weight_by_node.put(edge.get(1),  update_weight);
30	SHORTEST_PATHS	failcompile	weight_by_edge.put(edge.get(0),  update_weight);	weight_by_node.put(edge.get(1),  update_weight);
30	SHORTEST_PATHS	failcompile	weight_by_edge.put(edge.get(1),  update_weight);	weight_by_node.put(edge.get(1),  update_weight);
30	SHORTEST_PATHS	failcompile	weight_by_edge.put(edge,  weight_by_node);	weight_by_node.put(edge.get(1),  update_weight);
30	SHORTEST_PATHS	failcompile	weight_by_edge.put(edge,  update_weight_by_node);	weight_by_node.put(edge.get(1),  update_weight);
30	SHORTEST_PATHS	failcompile	weight_by_edge.put(edge.get(0),  update_weight);	weight_by_node.put(edge.get(1),  update_weight);
30	SHORTEST_PATHS	failcompile	weight_by_edge.put(weight_by_node,  update_weight);	weight_by_node.put(edge.get(1),  update_weight);
30	SHORTEST_PATHS	failcompile	weight_by_edge.put(edge,  update_weight.toString());	weight_by_node.put(edge.get(1),  update_weight);
30	SHORTEST_PATHS	successcompile	weight_by_edge.put(edge,  update_weight);	weight_by_node.put(edge.get(1),  update_weight);
30	SHORTEST_PATHS	failcompile	weight_by_edge.put(edge,  update_weight.get(0));	weight_by_node.put(edge.get(1),  update_weight);
30	SHORTEST_PATHS	successcompile	weight_by_edge.put(edge,  update_weight  +  1);	weight_by_node.put(edge.get(1),  update_weight);
30	SHORTEST_PATHS	failcompile	weight_by_edge.put(edge,  update_weight,  0);	weight_by_node.put(edge.get(1),  update_weight);
30	SHORTEST_PATHS	successcompile	weight_by_edge.put(edge,  update_weight  &  0xFF);	weight_by_node.put(edge.get(1),  update_weight);
30	SHORTEST_PATHS	failcompile	weight_by_edge.put(edge,  update_weight,  weight_by_weight);	weight_by_node.put(edge.get(1),  update_weight);
30	SHORTEST_PATHS	failcompile	weight_by_edge.put(edge,  update_weight_by);	weight_by_node.put(edge.get(1),  update_weight);
30	SHORTEST_PATHS	failcompile	weight_by_edge.put(edge.get(0),  update_weight.get(0));	weight_by_node.put(edge.get(1),  update_weight);
30	SHORTEST_PATHS	failcompile	weight_by_edge.put(edge,  update_weight)  {  }	weight_by_node.put(edge.get(1),  update_weight);
30	SHORTEST_PATHS	failcompile	weight_by_node.put(edge,  update_weight);	weight_by_node.put(edge.get(1),  update_weight);
30	SHORTEST_PATHS	failcompile	weight_by_edge.put(edge,  update_weight.get(1));	weight_by_node.put(edge.get(1),  update_weight);
30	SHORTEST_PATHS	failcompile	weight_by_edge.put(edge,  update_weight_by_weight);	weight_by_node.put(edge.get(1),  update_weight);
30	SHORTEST_PATHS	failcompile	weight_by_edge.put(edge,  weight_by_weight);	weight_by_node.put(edge.get(1),  update_weight);
30	SHORTEST_PATHS	failcompile	weight_by_edge.put(edge,  update_weight,  false);	weight_by_node.put(edge.get(1),  update_weight);
30	SHORTEST_PATHS	failcompile	weight_by_edge.put(edge.get(0),  update_weight.get(1));	weight_by_node.put(edge.get(1),  update_weight);
30	SHORTEST_PATHS	failcompile	weight_by_edge.put(edge,  update_weight).put(weight);	weight_by_node.put(edge.get(1),  update_weight);
30	SHORTEST_PATHS	successcompile	weight_by_edge.put(edge,  0);	weight_by_node.put(edge.get(1),  update_weight);
30	SHORTEST_PATHS	failcompile	weight_by_edge.put(edge,  update_weight).put(edge);	weight_by_node.put(edge.get(1),  update_weight);
30	SHORTEST_PATHS	failcompile	weight_by_edge.put(weight,  update_weight);	weight_by_node.put(edge.get(1),  update_weight);
30	SHORTEST_PATHS	failcompile	weight_by_edge.put(edge,  update_weight));	weight_by_node.put(edge.get(1),  update_weight);
30	SHORTEST_PATHS	failcompile	weight_by_edge.put(edge,  update_weight).add(weight);	weight_by_node.put(edge.get(1),  update_weight);
30	SHORTEST_PATHS	failcompile	weight_by_edge.add(edge,  update_weight);	weight_by_node.put(edge.get(1),  update_weight);
29	SHORTEST_PATH_LENGTHS	successcompile	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(j,k)));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
29	SHORTEST_PATH_LENGTHS	successcompile	length_by_path.get(Arrays.asList(i,j))  +  length_by_path.get(Arrays.asList(j,k)));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
29	SHORTEST_PATH_LENGTHS	successcompile	length_by_path.get(Arrays.asList(j,k))  +  length_by_path.get(Arrays.asList(j,k)));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
29	SHORTEST_PATH_LENGTHS	successcompile	length_by_path.get(Arrays.asList(j,j))  +  length_by_path.get(Arrays.asList(j,k)));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
29	SHORTEST_PATH_LENGTHS	successcompile	length_by_path.get(Arrays.asList(i,j))  +  length_by_path.get(Arrays.asList(j,j)));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
29	SHORTEST_PATH_LENGTHS	failcompile	length_by_path.get(Arrays.asList(i,k)),  length_by_path.get(Arrays.asList(j,k)));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
29	SHORTEST_PATH_LENGTHS	successcompile	length_by_path.get(Arrays.asList(j,i))  +  length_by_path.get(Arrays.asList(j,k)));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
29	SHORTEST_PATH_LENGTHS	successcompile	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(j,k)));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
29	SHORTEST_PATH_LENGTHS	successcompile	length_by_path.get(Arrays.asList(j,k))  +  length_by_path.get(Arrays.asList(i,j)));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
29	SHORTEST_PATH_LENGTHS	successcompile	length_by_path.get(Arrays.asList(j,k))  +  length_by_path.get(Arrays.asList(i,k)));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
29	SHORTEST_PATH_LENGTHS	failcompile	length_by_path.get(Arrays.asList(i,j)),  length_by_path.get(Arrays.asList(j,k)));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
29	SHORTEST_PATH_LENGTHS	successcompile	length_by_path.get(Arrays.asList(j,j))  +  length_by_path.get(Arrays.asList(j,j)));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
29	SHORTEST_PATH_LENGTHS	failcompile	width_by_path.get(Arrays.asList(i,k))  +  width_by_path.get(Arrays.asList(j,k)));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
29	SHORTEST_PATH_LENGTHS	successcompile	length_by_path.get(Arrays.asList(i,j))  +  length_by_path.get(Arrays.asList(j,k)));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
29	SHORTEST_PATH_LENGTHS	successcompile	length_by_path.get(Arrays.asList(j,k))  +  length_by_path.get(Arrays.asList(j,k)));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
29	SHORTEST_PATH_LENGTHS	successcompile	length_by_path.get(Arrays.asList(j,k))  +  length_by_path.get(Arrays.asList(j,j)));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
29	SHORTEST_PATH_LENGTHS	failcompile	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(j,k));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
29	SHORTEST_PATH_LENGTHS	failcompile	width_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(j,k)));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
29	SHORTEST_PATH_LENGTHS	failcompile	width_by_path.get(Arrays.asList(i,k))  +  height_by_path.get(Arrays.asList(j,k)));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
29	SHORTEST_PATH_LENGTHS	successcompile	length_by_path.get(Arrays.asList(j,j))  +  length_by_path.get(Arrays.asList(i,j)));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
29	SHORTEST_PATH_LENGTHS	successcompile	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(i,k)));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
29	SHORTEST_PATH_LENGTHS	successcompile	length_by_path.get(Arrays.asList(j,j))  +  length_by_path.get(Arrays.asList(j,k)));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
29	SHORTEST_PATH_LENGTHS	failcompile	length_by_path.get(Arrays.asList(i,j))  +  length_by_path.get(Arrays.asList(j,k));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
29	SHORTEST_PATH_LENGTHS	failcompile	.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(j,k)));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
29	SHORTEST_PATH_LENGTHS	failcompile	length_by_path.get(Arrays.asList(i,k))  +  Arrays.asList(j,k));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
29	SHORTEST_PATH_LENGTHS	failcompile	length_by_path.get(Arrays.asList(i,j))  +  Arrays.asList(j,k));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
29	SHORTEST_PATH_LENGTHS	successcompile	j  +=  length_by_path.get(Arrays.asList(i,k)));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
29	SHORTEST_PATH_LENGTHS	successcompile	+  length_by_path.get(Arrays.asList(j,k)));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
29	SHORTEST_PATH_LENGTHS	successcompile	length_by_path.get(Arrays.asList(i,k)));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
29	SHORTEST_PATH_LENGTHS	failcompile	length_by_path.get(Arrays.asList(i,k))  +  Arrays.asList(j,k)));	length_by_path.get(Arrays.asList(i,k))  +  length_by_path.get(Arrays.asList(k,j)));
11	HANOI	successcompile	steps.add(new  Pair  <  Integer,Integer>(start,  helper));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
11	HANOI	successcompile	steps.add(new  Pair  <  Integer,Integer>(start,  helper));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
11	HANOI	failcompile	.add(new  Pair  <  Integer,Integer>(start,  helper));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
11	HANOI	failcompile	steps.add(new  Pair  <  Integer,Integer>(start,  helper,  end));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
11	HANOI	failcompile	step_set.add(new  Pair  <  Integer,Integer>(start,  helper));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
11	HANOI	failcompile	s.add(new  Pair  <  Integer,Integer>(start,  helper));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
11	HANOI	failcompile	steps.add(new  Pair  <  Integer,Integer>(start));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
11	HANOI	successcompile	steps.add(new  Pair  <  Integer,Integer>(height-1,  helper));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
11	HANOI	failcompile	Steps.add(new  Pair  <  Integer,Integer>(start,  helper));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
11	HANOI	failcompile	steps.add(new  Pair  <  Integer,Integer>(start));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
11	HANOI	failcompile	n.add(new  Pair  <  Integer,Integer>(start,  helper));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
11	HANOI	successcompile	steps.add(new  Pair  <  Integer,Integer>(start  +  1,  helper));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
11	HANOI	successcompile	steps.add(new  Pair  <  Integer,Integer>(start,  helper  +  1));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
11	HANOI	successcompile	steps.add(new  Pair  <  Integer,Integer>(start-start,  helper));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
11	HANOI	identical	steps.add(new  Pair  <  Integer,Integer>(start,  end));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
11	HANOI	successcompile	steps.add(new  Pair  <  Integer,Integer>(start,  helper  +  1));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
11	HANOI	failcompile	steps.add(new  Pair  <  Integer,Integer>(start,  helper,  start));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
11	HANOI	failcompile	steps.add(new  Pair  <  Integer,Integer>(0,  start,  helper));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
11	HANOI	successcompile	steps.add(new  Pair  <  Integer,Integer>(start,  helper-1));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
11	HANOI	successcompile	steps.add(new  Pair  <  Integer,Integer>(start  +  1,  helper));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
11	HANOI	successcompile	steps.add(new  Pair  <  Integer,  Integer>(start,  helper));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
11	HANOI	successcompile	steps.add(new  Pair  <  Integer,Integer>(start-1,  helper));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
11	HANOI	successcompile	steps.add(new  Pair  <  Integer,Integer>(start,  helper-1));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
11	HANOI	successcompile	steps.add(new  Pair  <  Integer,Integer>(end,  helper));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
11	HANOI	identical	steps.add(new  Pair  <  Integer,Integer>(start,  end));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
11	HANOI	failcompile	.add(new  Pair  <  Integer,Integer>(start));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
11	HANOI	failcompile	steps.add(new  Pair  <  Integer,Integer>(start,  helper,  1));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
11	HANOI	successcompile	steps.add(new  Pair  <  >(start,  helper));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
11	HANOI	successcompile	steps.add(new  Pair  <  >(start,  helper));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
11	HANOI	successcompile	steps.add(new  Pair(start,  helper));	steps.add(new  Pair  <  Integer,Integer>(start,  end));
27	RPN_EVAL	successcompile	c  =  bin_op.apply(a,b);	c  =  bin_op.apply(b,a);
27	RPN_EVAL	successcompile	c  =  bin_op.apply(a,b);	c  =  bin_op.apply(b,a);
27	RPN_EVAL	failcompile	c  =  bin_op.apply((Double)  token);	c  =  bin_op.apply(b,a);
27	RPN_EVAL	failcompile	c  =  bin_op.apply((Double)  token);	c  =  bin_op.apply(b,a);
27	RPN_EVAL	failcompile	c  =  bin_op.apply(token,b);	c  =  bin_op.apply(b,a);
27	RPN_EVAL	successcompile	c  =  bin_op.apply((Double)  token,b);	c  =  bin_op.apply(b,a);
27	RPN_EVAL	identical	c  =  bin_op.apply(b,a);	c  =  bin_op.apply(b,a);
27	RPN_EVAL	failcompile	c  =  bin_op.apply(token,b);	c  =  bin_op.apply(b,a);
27	RPN_EVAL	identical	c  =  bin_op.apply(b,a);	c  =  bin_op.apply(b,a);
27	RPN_EVAL	failcompile	c  =  bin_op.apply(a  +  b);	c  =  bin_op.apply(b,a);
27	RPN_EVAL	failcompile	c  =  bin_op.apply(token);	c  =  bin_op.apply(b,a);
27	RPN_EVAL	successcompile	c  =  bin_op.apply((double)  a,b);	c  =  bin_op.apply(b,a);
27	RPN_EVAL	failcompile	c  =  bin_op.apply(new  Double(a,b));	c  =  bin_op.apply(b,a);
27	RPN_EVAL	failcompile	c  =  bin_op.apply(a  +  b);	c  =  bin_op.apply(b,a);
27	RPN_EVAL	failcompile	c  =  bin_op.apply(token);	c  =  bin_op.apply(b,a);
27	RPN_EVAL	successcompile	c  =  bin_op.apply(a,b  -  b);	c  =  bin_op.apply(b,a);
27	RPN_EVAL	successcompile	c  =  bin_op.apply((double)  a,b);	c  =  bin_op.apply(b,a);
27	RPN_EVAL	failcompile	c  =  binary_op.apply(a,b);	c  =  bin_op.apply(b,a);
27	RPN_EVAL	successcompile	c  =  bin_op.apply(a,b  -  b);	c  =  bin_op.apply(b,a);
27	RPN_EVAL	failcompile	c  =  bin_op.apply((Double)  a);	c  =  bin_op.apply(b,a);
27	RPN_EVAL	failcompile	c  =  bin_op.apply((Double)token);	c  =  bin_op.apply(b,a);
27	RPN_EVAL	passHumanTest	c  =  bin_op.apply(b,  a);	c  =  bin_op.apply(b,a);
27	RPN_EVAL	failcompile	=  bin_op.apply(a,b);	c  =  bin_op.apply(b,a);
27	RPN_EVAL	failcompile	c  =  bin_op.get(token);	c  =  bin_op.apply(b,a);
27	RPN_EVAL	successcompile	c  =  bin_op.apply(c,b);	c  =  bin_op.apply(b,a);
27	RPN_EVAL	failcompile	c  =  bin_op.apply(b);	c  =  bin_op.apply(b,a);
27	RPN_EVAL	failcompile	c  =  bin_op.get(token);	c  =  bin_op.apply(b,a);
27	RPN_EVAL	failcompile	c  =  bin_op.apply(a);	c  =  bin_op.apply(b,a);
27	RPN_EVAL	failcompile	c  =  bin_op.apply(b);	c  =  bin_op.apply(b,a);
27	RPN_EVAL	failcompile	op.apply(a,b);	c  =  bin_op.apply(b,a);
24	POSSIBLE_CHANGE	successcompile	if  (total  <  1)  {	if  (total  <  0  ||coins.length==0)  {
24	POSSIBLE_CHANGE	failcompile	if  (total  <  =  0)  {	if  (total  <  0  ||coins.length==0)  {
24	POSSIBLE_CHANGE	successcompile	if  (total  >  0)  {	if  (total  <  0  ||coins.length==0)  {
24	POSSIBLE_CHANGE	successcompile	if  (total  <  0  &&  total  >  1)  {	if  (total  <  0  ||coins.length==0)  {
24	POSSIBLE_CHANGE	successcompile	if  (total  <  0  ||  total  >  1)  {	if  (total  <  0  ||coins.length==0)  {
24	POSSIBLE_CHANGE	failcompile	if  (total  <  =  0)  {	if  (total  <  0  ||coins.length==0)  {
24	POSSIBLE_CHANGE	successcompile	if  (total  >  0)  {	if  (total  <  0  ||coins.length==0)  {
24	POSSIBLE_CHANGE	successcompile	if  (total  <  0  ||  total  <  1)  {	if  (total  <  0  ||coins.length==0)  {
24	POSSIBLE_CHANGE	successcompile	if  (total  <  0)  {	if  (total  <  0  ||coins.length==0)  {
24	POSSIBLE_CHANGE	successcompile	if  (total  >=  0)  {	if  (total  <  0  ||coins.length==0)  {
24	POSSIBLE_CHANGE	failcompile	if  (total  <  =  1)  {	if  (total  <  0  ||coins.length==0)  {
24	POSSIBLE_CHANGE	successcompile	if  (total  <  0  ||  total  >  1)  {	if  (total  <  0  ||coins.length==0)  {
24	POSSIBLE_CHANGE	successcompile	if  (total  <  0  ||  total  ==  1)  {	if  (total  <  0  ||coins.length==0)  {
24	POSSIBLE_CHANGE	successcompile	if  (total  <  1  ||  total  >  0)  {	if  (total  <  0  ||coins.length==0)  {
24	POSSIBLE_CHANGE	successcompile	if  (total  <  1)  {	if  (total  <  0  ||coins.length==0)  {
24	POSSIBLE_CHANGE	successcompile	if  (total  <  0  &&  total  <  1)  {	if  (total  <  0  ||coins.length==0)  {
24	POSSIBLE_CHANGE	successcompile	if  (total  >=  0)  {	if  (total  <  0  ||coins.length==0)  {
24	POSSIBLE_CHANGE	successcompile	if  (total  ==  0)  {	if  (total  <  0  ||coins.length==0)  {
24	POSSIBLE_CHANGE	successcompile	if  (total  <  1  ||  total  >  1)  {	if  (total  <  0  ||coins.length==0)  {
24	POSSIBLE_CHANGE	successcompile	if  (total  <  0)  {	if  (total  <  0  ||coins.length==0)  {
24	POSSIBLE_CHANGE	failcompile	if  (total  +  1  <  =  0)  {	if  (total  <  0  ||coins.length==0)  {
24	POSSIBLE_CHANGE	successcompile	if  (total  ==  0)  {	if  (total  <  0  ||coins.length==0)  {
24	POSSIBLE_CHANGE	successcompile	if  (total  >  1)  {	if  (total  <  0  ||coins.length==0)  {
24	POSSIBLE_CHANGE	failcompile	if  (total  <  =  1)  {	if  (total  <  0  ||coins.length==0)  {
24	POSSIBLE_CHANGE	successcompile	if  (total!=  0)  {	if  (total  <  0  ||coins.length==0)  {
24	POSSIBLE_CHANGE	successcompile	if  (total  <  2)  {	if  (total  <  0  ||coins.length==0)  {
24	POSSIBLE_CHANGE	successcompile	if  (total  <  -1)  {	if  (total  <  0  ||coins.length==0)  {
24	POSSIBLE_CHANGE	successcompile	if  (total>0)  {	if  (total  <  0  ||coins.length==0)  {
24	POSSIBLE_CHANGE	failcompile	if  (total  <  first)  {	if  (total  <  0  ||coins.length==0)  {
24	POSSIBLE_CHANGE	successcompile	if  (total  >  1)  {	if  (total  <  0  ||coins.length==0)  {
15	KTH	failcompile	if  (num_lessoreq  >=  num_lessoreq)  {  return  kth(above,  k);  }  else  {  return  kth(num_lessoreq,  k);  }	return  kth(above,  k-num_lessoreq);
15	KTH	failcompile	if  (k  >=  num_lessoreq)  {  return  kth(above,  k);  }  else  {  return  kth(num_lessoreq,  k);  }	return  kth(above,  k-num_lessoreq);
15	KTH	failcompile	if  (num_lessoreq  >  num_lessoreq)  {  return  kth(above,  k);  }  else  {  return  kth(num_lessoreq,  k);  }	return  kth(above,  k-num_lessoreq);
15	KTH	failcompile	if  (num_lessoreq  <  num_lessoreq)  {  return  kth(above,  k);  }  else  {  return  kth(num_lessoreq,  k);  }	return  kth(above,  k-num_lessoreq);
15	KTH	failcompile	if  (num_lessoreq  >=  num_lessoreq)  {  return  kth(below,  k);  }  else  {  return  kth(num_lessoreq,  k);  }	return  kth(above,  k-num_lessoreq);
15	KTH	successcompile	if  (k  >=  num_lessoreq)  {  return  kth(above,  k);  }  else  {  return  kth(below,  k);  }	return  kth(above,  k-num_lessoreq);
15	KTH	failcompile	if  (num_lessoreq  >=  above.size())  {  return  kth(above,  k);  }  else  {  return  kth(num_lessoreq,  k);  }	return  kth(above,  k-num_lessoreq);
15	KTH	successcompile	if  (num_lessoreq  >=  num_lessoreq)  {  return  kth(above,  k);  }  else  {  return  kth(below,  k);  }	return  kth(above,  k-num_lessoreq);
15	KTH	failcompile	if  (k  >=  num_lessoreq)  {  return  kth(below,  k);  }  else  {  return  kth(num_lessoreq,  k);  }	return  kth(above,  k-num_lessoreq);
15	KTH	failcompile	if  (num_lessoreq  <  num_lessoreq)  {  return  kth(below,  k);  }  else  {  return  kth(num_lessoreq,  k);  }	return  kth(above,  k-num_lessoreq);
15	KTH	failcompile	if  (num_lessoreq  >  0)  {  return  kth(above,  k);  }  else  {  return  kth(num_lessoreq,  k);  }	return  kth(above,  k-num_lessoreq);
15	KTH	failcompile	if  (k  >  num_lessoreq)  {  return  kth(above,  k);  }  else  {  return  kth(num_lessoreq,  k);  }	return  kth(above,  k-num_lessoreq);
15	KTH	failcompile	if  (k  >=  num_lessoreq)  {  return  kth(above,  k);  }  else  {  return  kth(int,  k);  }	return  kth(above,  k-num_lessoreq);
15	KTH	failcompile	if  (num_lessoreq  >=  num_lessoreq)  {  return  kth(above,  k);  }  else  {  return  kth(int,  k);  }	return  kth(above,  k-num_lessoreq);
15	KTH	successcompile	if  (k  >=  num_lessoreq)  {  return  kth(above,  k);  }  else  {  return  kth(above,  k);  }	return  kth(above,  k-num_lessoreq);
15	KTH	successcompile	if  (num_lessoreq  >=  above.size())  {  return  kth(above,  k);  }  else  {  return  kth(below,  k);  }	return  kth(above,  k-num_lessoreq);
15	KTH	successcompile	if  (num_lessoreq  >=  num_lessoreq)  {  return  kth(above,  k);  }  else  {  return  num_lessoreq;  }	return  kth(above,  k-num_lessoreq);
15	KTH	failcompile	kth(below,  k);  return  kth(num_lessoreq,  k);	return  kth(above,  k-num_lessoreq);
15	KTH	failcompile	kth(below,  k);  return  kth(num_lessoreq,  k);	return  kth(above,  k-num_lessoreq);
15	KTH	failcompile	return  kth(num_lessoreq,  k);	return  kth(above,  k-num_lessoreq);
15	KTH	successcompile	return  kth(below,  k);	return  kth(above,  k-num_lessoreq);
15	KTH	failcompile	kth(num_lessoreq,  above,  k);	return  kth(above,  k-num_lessoreq);
15	KTH	failcompile	kth(num_lessoreq,  k);	return  kth(above,  k-num_lessoreq);
15	KTH	failcompile	kth(num_lessoreq,  k);	return  kth(above,  k-num_lessoreq);
15	KTH	failcompile	kth(below,  k);	return  kth(above,  k-num_lessoreq);
15	KTH	successcompile	;  return  kth(below,  k);	return  kth(above,  k-num_lessoreq);
15	KTH	failcompile	return  kth(int,  k);	return  kth(above,  k-num_lessoreq);
15	KTH	failcompile	kth(below,  k);	return  kth(above,  k-num_lessoreq);
15	KTH	failcompile	kth(int,  k);	return  kth(above,  k-num_lessoreq);
15	KTH	failcompile	;	return  kth(above,  k-num_lessoreq);
35	WRAP	failcompile	if  (end  ==  -1)  {  end  =  cols;  }	lines.add(text);
35	WRAP	failcompile	if  (end  ==  -1)  {  end  =  end;  }	lines.add(text);
35	WRAP	failcompile	if  (end  <  0)  {  end  =  0;  }	lines.add(text);
35	WRAP	failcompile	if  (end  <  0)  {  end  =  -1;  }	lines.add(text);
35	WRAP	failcompile	if  (end  >=  0)  {  end  =  cols;  }	lines.add(text);
35	WRAP	failcompile	if(end  ==  -1)  {  end  =  cols;  }	lines.add(text);
35	WRAP	failcompile	if  (end  >=  -1)  {  end  =  cols;  }	lines.add(text);
35	WRAP	failcompile	if  (end  ==  -1)  {  end  =  cols;  }	lines.add(text);
35	WRAP	failcompile	if  (end  <  0)  {  end  =  end;  }	lines.add(text);
35	WRAP	failcompile	if  (end  ==  -1)  {  end  =  -1;  }	lines.add(text);
35	WRAP	failcompile	if  (end  ==  -1)  {  end  =   "   ";  }	lines.add(text);
35	WRAP	failcompile	while  (end  ==  -1)  {  end  =  cols;  }	lines.add(text);
35	WRAP	failcompile	end  =  text.lastIndexOf(   "   ",  end);	lines.add(text);
35	WRAP	failcompile	if  (end  >=  0)  {  end  =  end;  }	lines.add(text);
35	WRAP	failcompile	||  end  ==  -1)  {  end  =  cols;  }	lines.add(text);
35	WRAP	failcompile	if  (end  <  0)  {  end  =  cols;  }	lines.add(text);
35	WRAP	failcompile	line  =  text.substring(0,end);	lines.add(text);
35	WRAP	failcompile	line  =  text.substring(0,end);	lines.add(text);
35	WRAP	successcompile	;	lines.add(text);
35	WRAP	failcompile	cols  =  text.trim();	lines.add(text);
35	WRAP	failcompile	|=  text.length();	lines.add(text);
35	WRAP	successcompile	text  =  text.trim();	lines.add(text);
35	WRAP	failcompile	.add(   "   ");	lines.add(text);
35	WRAP	failcompile	|=  end;	lines.add(text);
35	WRAP	failcompile	.add(text);	lines.add(text);
35	WRAP	failcompile	=   "   ";	lines.add(text);
35	WRAP	failcompile	=  null;	lines.add(text);
35	WRAP	failcompile	=  0;	lines.add(text);
35	WRAP	failcompile	=  false;	lines.add(text);
35	WRAP	failcompile	=  true;	lines.add(text);
12	IS_VALID_PARENTHESIZATION	successcompile	return  false;	return  depth==0;
12	IS_VALID_PARENTHESIZATION	successcompile	Boolean  result  =  true;  return  result;	return  depth==0;
12	IS_VALID_PARENTHESIZATION	successcompile	return  Boolean.FALSE;	return  depth==0;
12	IS_VALID_PARENTHESIZATION	successcompile	Boolean  result  =  false;  return  result;	return  depth==0;
12	IS_VALID_PARENTHESIZATION	failcompile	return  Boolean.valueOf(depth);	return  depth==0;
12	IS_VALID_PARENTHESIZATION	successcompile	return  Boolean.TRUE;	return  depth==0;
12	IS_VALID_PARENTHESIZATION	failcompile	if  (depth  >  0)  return  false;	return  depth==0;
12	IS_VALID_PARENTHESIZATION	failcompile	if  (depth  >  0)  return  true;	return  depth==0;
12	IS_VALID_PARENTHESIZATION	failcompile	result  =  Boolean.FALSE;	return  depth==0;
12	IS_VALID_PARENTHESIZATION	failcompile	||  parens  ==  null;	return  depth==0;
12	IS_VALID_PARENTHESIZATION	failcompile	Boolean  result;  return  result;	return  depth==0;
12	IS_VALID_PARENTHESIZATION	failcompile	result  =  true;  return  result;	return  depth==0;
12	IS_VALID_PARENTHESIZATION	failcompile	!=  null;	return  depth==0;
12	IS_VALID_PARENTHESIZATION	failcompile	result  =  false;  return  result;	return  depth==0;
12	IS_VALID_PARENTHESIZATION	successcompile	return  true;	return  depth==0;
12	IS_VALID_PARENTHESIZATION	failcompile	result  =  false;	return  depth==0;
12	IS_VALID_PARENTHESIZATION	failcompile	result  =  true;	return  depth==0;
12	IS_VALID_PARENTHESIZATION	failcompile	return  true;  return  false;	return  depth==0;
12	IS_VALID_PARENTHESIZATION	failcompile	return  false;  return  true;	return  depth==0;
12	IS_VALID_PARENTHESIZATION	failcompile	return  false;  return  false;	return  depth==0;
12	IS_VALID_PARENTHESIZATION	failcompile	false;  return  false;	return  depth==0;
12	IS_VALID_PARENTHESIZATION	failcompile	++i;	return  depth==0;
12	IS_VALID_PARENTHESIZATION	failcompile	false;  return  true;	return  depth==0;
12	IS_VALID_PARENTHESIZATION	successcompile	return  false;	return  depth==0;
12	IS_VALID_PARENTHESIZATION	failcompile	false;	return  depth==0;
12	IS_VALID_PARENTHESIZATION	failcompile	;	return  depth==0;
12	IS_VALID_PARENTHESIZATION	successcompile	return  true;	return  depth==0;
12	IS_VALID_PARENTHESIZATION	failcompile	nan	return  depth==0;
12	IS_VALID_PARENTHESIZATION	failcompile	n  =  false;	return  depth==0;
12	IS_VALID_PARENTHESIZATION	failcompile	continue;	return  depth==0;
1	BITCOUNT	successcompile	n  =  (n  ^  (n  -  1));	n  =  (n  &  (n  -  1));
1	BITCOUNT	failcompile	n  =  (n  ^  =  (n  -  1));	n  =  (n  &  (n  -  1));
1	BITCOUNT	failcompile	n  =  (n  <  (n  -  1));	n  =  (n  &  (n  -  1));
1	BITCOUNT	successcompile	n  =  n  ^  (n  -  1);	n  =  (n  &  (n  -  1));
1	BITCOUNT	failcompile	(n  ^  (n  -  1));	n  =  (n  &  (n  -  1));
1	BITCOUNT	successcompile	n  =  (n  ^  (n  -  1));	n  =  (n  &  (n  -  1));
1	BITCOUNT	failcompile	n  =  (n  ^  (n  -  1);	n  =  (n  &  (n  -  1));
1	BITCOUNT	successcompile	n  =  (n  ^  (n));	n  =  (n  &  (n  -  1));
1	BITCOUNT	successcompile	n  =  (n  ^  n);	n  =  (n  &  (n  -  1));
1	BITCOUNT	successcompile	n  =  (n  ^  (n  -  2));	n  =  (n  &  (n  -  1));
1	BITCOUNT	successcompile	n  =  n  ^  (n  -  1);	n  =  (n  &  (n  -  1));
1	BITCOUNT	successcompile	n  +=  (n  ^  (n  -  1));	n  =  (n  &  (n  -  1));
1	BITCOUNT	successcompile	n  =  (n  ^  (n  +  1));	n  =  (n  &  (n  -  1));
1	BITCOUNT	failcompile	n  =  (n  <  =  (n  -  1));	n  =  (n  &  (n  -  1));
1	BITCOUNT	successcompile	n  =  (n  ^  0);	n  =  (n  &  (n  -  1));
1	BITCOUNT	failcompile	n  =  (n  {  (n  -  1));	n  =  (n  &  (n  -  1));
1	BITCOUNT	failcompile	n  =  (n  }  (n  -  1));	n  =  (n  &  (n  -  1));
1	BITCOUNT	failcompile	=  (n  ^  (n  -  1));	n  =  (n  &  (n  -  1));
1	BITCOUNT	failcompile	(n  <  (n  -  1));	n  =  (n  &  (n  -  1));
1	BITCOUNT	successcompile	n  =  (n  ^  (n  -  1));	n  =  (n  &  (n  -  1));
1	BITCOUNT	failcompile	n  =  n  <  (n  -  1);	n  =  (n  &  (n  -  1));
1	BITCOUNT	successcompile	n  =  (n  ^  (n  -1));	n  =  (n  &  (n  -  1));
1	BITCOUNT	failcompile	n  =  (n  ^  =  n);	n  =  (n  &  (n  -  1));
1	BITCOUNT	failcompile	n  =  (n  <  (n));	n  =  (n  &  (n  -  1));
1	BITCOUNT	successcompile	n  =  n  ^  (n);	n  =  (n  &  (n  -  1));
1	BITCOUNT	failcompile	n  =  (n  <  n);	n  =  (n  &  (n  -  1));
1	BITCOUNT	failcompile	n  =  (n  <  0);	n  =  (n  &  (n  -  1));
1	BITCOUNT	failcompile	(n  ^  0));	n  =  (n  &  (n  -  1));
1	BITCOUNT	failcompile	(n  <  0));	n  =  (n  &  (n  -  1));
1	BITCOUNT	successcompile	n  =  n;	n  =  (n  &  (n  -  1));
6	FIND_FIRST_IN_SORTED	failcompile	while  (lo  <  =  hi)  {	while  (lo  <  hi)  {
6	FIND_FIRST_IN_SORTED	failcompile	while  (lo  <  =  mid)  {	while  (lo  <  hi)  {
6	FIND_FIRST_IN_SORTED	failcompile	if  (lo  <  =  hi)  {	while  (lo  <  hi)  {
6	FIND_FIRST_IN_SORTED	identical	while  (lo  <  hi)  {	while  (lo  <  hi)  {
6	FIND_FIRST_IN_SORTED	successcompile	while  (lo  <  0)  {	while  (lo  <  hi)  {
6	FIND_FIRST_IN_SORTED	successcompile	while  (lo  >=  hi)  {	while  (lo  <  hi)  {
6	FIND_FIRST_IN_SORTED	failcompile	while  (lo  <  =  (hi  +  1))  {	while  (lo  <  hi)  {
6	FIND_FIRST_IN_SORTED	failcompile	while  (lo  <  =  hi  +  1)  {	while  (lo  <  hi)  {
6	FIND_FIRST_IN_SORTED	successcompile	while  (lo  <  (hi  +  1))  {	while  (lo  <  hi)  {
6	FIND_FIRST_IN_SORTED	failcompile	while  (lo  <  =  hi)  {	while  (lo  <  hi)  {
6	FIND_FIRST_IN_SORTED	passHumanTest	while  (lo  <  (hi))  {	while  (lo  <  hi)  {
6	FIND_FIRST_IN_SORTED	successcompile	while  (lo  <  (hi  -  1))  {	while  (lo  <  hi)  {
6	FIND_FIRST_IN_SORTED	failcompile	while  (lo  <  =  hi  +  1)  {	while  (lo  <  hi)  {
6	FIND_FIRST_IN_SORTED	failcompile	while  (lo  <  =  0)  {	while  (lo  <  hi)  {
6	FIND_FIRST_IN_SORTED	failcompile	while  (lo  <  =  arr.length)  {	while  (lo  <  hi)  {
6	FIND_FIRST_IN_SORTED	failcompile	while  (lo  <  =  hi)  {  @Override	while  (lo  <  hi)  {
6	FIND_FIRST_IN_SORTED	successcompile	while  (lo  >  hi)  {	while  (lo  <  hi)  {
6	FIND_FIRST_IN_SORTED	failcompile	while  (lo  <  =  (hi))  {	while  (lo  <  hi)  {
6	FIND_FIRST_IN_SORTED	failcompile	while  (lo  <  =  hi)  {  return  mid;	while  (lo  <  hi)  {
6	FIND_FIRST_IN_SORTED	failcompile	whil  (lo  <  =  hi)  {	while  (lo  <  hi)  {
6	FIND_FIRST_IN_SORTED	failcompile	while  (lo  <  =  hi  -  1)  {	while  (lo  <  hi)  {
6	FIND_FIRST_IN_SORTED	failcompile	while  (lo  <  =  i)  {	while  (lo  <  hi)  {
6	FIND_FIRST_IN_SORTED	failcompile	while  (lo  <  =  hi-1)  {	while  (lo  <  hi)  {
6	FIND_FIRST_IN_SORTED	failcompile	while  (lo  <  =  lo)  {	while  (lo  <  hi)  {
6	FIND_FIRST_IN_SORTED	failcompile	while  (lo  <  mid)  {	while  (lo  <  hi)  {
6	FIND_FIRST_IN_SORTED	successcompile	if  (lo  <  0)  {	while  (lo  <  hi)  {
6	FIND_FIRST_IN_SORTED	failcompile	While  (lo  <  =  hi)  {	while  (lo  <  hi)  {
6	FIND_FIRST_IN_SORTED	failcompile	While  (lo  <  =  hi)  {	while  (lo  <  hi)  {
6	FIND_FIRST_IN_SORTED	failcompile	if  (lo  <  =  hi)  {	while  (lo  <  hi)  {
6	FIND_FIRST_IN_SORTED	failcompile	while  (lo  <  h)  {	while  (lo  <  hi)  {
19	MAX_SUBLIST_SUM	failcompile	_ending_here  =  _max_ending_here  +  x;	max_ending_here  =  Math.max(0,max_ending_here  +  x);
19	MAX_SUBLIST_SUM	failcompile	_ending_here  =  (int)(max_ending_here  +  x);	max_ending_here  =  Math.max(0,max_ending_here  +  x);
19	MAX_SUBLIST_SUM	failcompile	_ending_here  =  max_ending_here  +  x;	max_ending_here  =  Math.max(0,max_ending_here  +  x);
19	MAX_SUBLIST_SUM	successcompile	max_ending_here  =  max_ending_here  +  x;	max_ending_here  =  Math.max(0,max_ending_here  +  x);
19	MAX_SUBLIST_SUM	failcompile	max_ending_here  =  arr  +  max_ending_here  +  x;	max_ending_here  =  Math.max(0,max_ending_here  +  x);
19	MAX_SUBLIST_SUM	failcompile	_ending_here  =  (int)  (max_ending_here  +  x);	max_ending_here  =  Math.max(0,max_ending_here  +  x);
19	MAX_SUBLIST_SUM	successcompile	max_ending_here  =  max_ending_here  +  x;	max_ending_here  =  Math.max(0,max_ending_here  +  x);
19	MAX_SUBLIST_SUM	successcompile	max_ending_here  =  max_ending_here  +  1;	max_ending_here  =  Math.max(0,max_ending_here  +  x);
19	MAX_SUBLIST_SUM	successcompile	max_ending_here  =  max_ending_here  +  x  -  1;	max_ending_here  =  Math.max(0,max_ending_here  +  x);
19	MAX_SUBLIST_SUM	successcompile	max_ending_here  =  max_ending_here  +  x  +  1;	max_ending_here  =  Math.max(0,max_ending_here  +  x);
19	MAX_SUBLIST_SUM	successcompile	max_ending_here  =  max_ending_here  +  1;	max_ending_here  =  Math.max(0,max_ending_here  +  x);
19	MAX_SUBLIST_SUM	successcompile	max_ending_here  =  (max_ending_here  +  x)  +  1;	max_ending_here  =  Math.max(0,max_ending_here  +  x);
19	MAX_SUBLIST_SUM	successcompile	max_ending_here  =  max_ending_here  +  x  +  1;	max_ending_here  =  Math.max(0,max_ending_here  +  x);
19	MAX_SUBLIST_SUM	successcompile	max_ending_here  =  Math.max(max_ending_here,  x);	max_ending_here  =  Math.max(0,max_ending_here  +  x);
19	MAX_SUBLIST_SUM	failcompile	max_ending_here  =  max_ending_here  +  arr;	max_ending_here  =  Math.max(0,max_ending_here  +  x);
19	MAX_SUBLIST_SUM	successcompile	max_ending_here  =  max_ending_here  +  (int)  x;	max_ending_here  =  Math.max(0,max_ending_here  +  x);
19	MAX_SUBLIST_SUM	successcompile	max_ending_here  =  (max_ending_here  +  x)  +  1;	max_ending_here  =  Math.max(0,max_ending_here  +  x);
19	MAX_SUBLIST_SUM	successcompile	max_ending_here  =  max_ending_here;	max_ending_here  =  Math.max(0,max_ending_here  +  x);
19	MAX_SUBLIST_SUM	failcompile	max_ending_here  =  arr  +  x;	max_ending_here  =  Math.max(0,max_ending_here  +  x);
19	MAX_SUBLIST_SUM	successcompile	max_ending_here  =  max_ending_here;	max_ending_here  =  Math.max(0,max_ending_here  +  x);
19	MAX_SUBLIST_SUM	successcompile	max_ending_here  =  0;	max_ending_here  =  Math.max(0,max_ending_here  +  x);
19	MAX_SUBLIST_SUM	successcompile	max_ending_here  +=  x;	max_ending_here  =  Math.max(0,max_ending_here  +  x);
19	MAX_SUBLIST_SUM	successcompile	max_ending_here  =  0;	max_ending_here  =  Math.max(0,max_ending_here  +  x);
19	MAX_SUBLIST_SUM	successcompile	max_ending_here  =  x;	max_ending_here  =  Math.max(0,max_ending_here  +  x);
19	MAX_SUBLIST_SUM	successcompile	max_ending_here  +=  x;	max_ending_here  =  Math.max(0,max_ending_here  +  x);
19	MAX_SUBLIST_SUM	failcompile	max_ending_here  =  arr;	max_ending_here  =  Math.max(0,max_ending_here  +  x);
19	MAX_SUBLIST_SUM	successcompile	max_ending_here  =  x;	max_ending_here  =  Math.max(0,max_ending_here  +  x);
19	MAX_SUBLIST_SUM	failcompile	_ending_here  =  0;	max_ending_here  =  Math.max(0,max_ending_here  +  x);
19	MAX_SUBLIST_SUM	successcompile	max_ending_here  =  1;	max_ending_here  =  Math.max(0,max_ending_here  +  x);
19	MAX_SUBLIST_SUM	successcompile	max_ending_here  =  1;	max_ending_here  =  Math.max(0,max_ending_here  +  x);
20	MERGESORT	successcompile	if  (arr  ==  null  ||  arr.size()  ==  0)  {	if  (arr.size()  <  =  1)  {
20	MERGESORT	successcompile	if  (arr  ==  null  ||  arr.size()  ==  0)  {	if  (arr.size()  <  =  1)  {
20	MERGESORT	failcompile	if  (middle  ==  null  ||  arr.size()  ==  0)  {	if  (arr.size()  <  =  1)  {
20	MERGESORT	failcompile	if  (middle  ==  null  ||  arr.size()  ==  0)  {	if  (arr.size()  <  =  1)  {
20	MERGESORT	successcompile	if  (arr.size()  ==  1  ||  arr.size()  ==  0)  {	if  (arr.size()  <  =  1)  {
20	MERGESORT	successcompile	if  (!arr.isEmpty())  {	if  (arr.size()  <  =  1)  {
20	MERGESORT	successcompile	if  (arr.size()  ==  1)  {	if  (arr.size()  <  =  1)  {
20	MERGESORT	successcompile	if  (!arr.isEmpty())  {	if  (arr.size()  <  =  1)  {
20	MERGESORT	successcompile	if  (arr.size()  ==  1)  {	if  (arr.size()  <  =  1)  {
20	MERGESORT	successcompile	if  (arr.size()  ==  1  ||  arr.size()  ==  2)  {	if  (arr.size()  <  =  1)  {
20	MERGESORT	successcompile	if  (arr.size()  ==  0  ||  arr.size()  ==  1)  {	if  (arr.size()  <  =  1)  {
20	MERGESORT	successcompile	if  (arr.size()  ==  0  ||  arr.size()  ==  1)  {	if  (arr.size()  <  =  1)  {
20	MERGESORT	failcompile	if  (arr.size()  ==  0  &&  middle  >  0)  {	if  (arr.size()  <  =  1)  {
20	MERGESORT	successcompile	if  (arr.size()  ==  1  ||  arr.size()  ==  2)  {	if  (arr.size()  <  =  1)  {
20	MERGESORT	successcompile	if  (arr.size()  ==  1  ||  arr.size()  ==  2)  {	if  (arr.size()  <  =  1)  {
20	MERGESORT	successcompile	if  (arr.size()  ==  1  ||  arr.size()  ==  1)  {	if  (arr.size()  <  =  1)  {
20	MERGESORT	failcompile	if  (arr.size()  <  =  0)  {	if  (arr.size()  <  =  1)  {
20	MERGESORT	successcompile	if  (arr.size()  ==  1  ||  arr.size()  ==  2)  {	if  (arr.size()  <  =  1)  {
20	MERGESORT	successcompile	if  (arr.size()!=  0)  {	if  (arr.size()  <  =  1)  {
20	MERGESORT	failcompile	if  (arr.size()  <  =  1  in  correct  version)  {	if  (arr.size()  <  =  1)  {
20	MERGESORT	failcompile	if  (middle.size()  ==  0)  {	if  (arr.size()  <  =  1)  {
20	MERGESORT	successcompile	if  (arr.isEmpty())  {	if  (arr.size()  <  =  1)  {
20	MERGESORT	successcompile	if  (arr.size()!=  0)  {	if  (arr.size()  <  =  1)  {
20	MERGESORT	failcompile	if  (arr.size()  <  =  0)  {	if  (arr.size()  <  =  1)  {
20	MERGESORT	failcompile	If  (arr.size()  ==  0)  {	if  (arr.size()  <  =  1)  {
20	MERGESORT	failcompile	if  (middle.size()  ==  0)  {	if  (arr.size()  <  =  1)  {
20	MERGESORT	successcompile	if  (arr.size()  >  0)  {	if  (arr.size()  <  =  1)  {
20	MERGESORT	successcompile	if  (arr.isEmpty())  {	if  (arr.size()  <  =  1)  {
20	MERGESORT	successcompile	if  (arr.size()  ==  0)  {	if  (arr.size()  <  =  1)  {
20	MERGESORT	successcompile	if  (arr.size()  >  0)  {	if  (arr.size()  <  =  1)  {
7	FIND_IN_SORTED	successcompile	return  binsearch(arr,  x,  start,  end);	return  binsearch(arr,  x,  mid+1,  end);
7	FIND_IN_SORTED	successcompile	return  binsearch(arr,  x,  mid,  end  -  start);	return  binsearch(arr,  x,  mid+1,  end);
7	FIND_IN_SORTED	successcompile	return  binsearch(arr,  x,  mid,  end);	return  binsearch(arr,  x,  mid+1,  end);
7	FIND_IN_SORTED	successcompile	return  binsearch(arr,  x,  start,  end  -  start);	return  binsearch(arr,  x,  mid+1,  end);
7	FIND_IN_SORTED	successcompile	return  binsearch(arr,  x,  mid,  end);	return  binsearch(arr,  x,  mid+1,  end);
7	FIND_IN_SORTED	successcompile	return  binsearch(arr,  x,  start  +  mid,  end);	return  binsearch(arr,  x,  mid+1,  end);
7	FIND_IN_SORTED	successcompile	return  binsearch(arr,  x,  mid,  end  +  1);	return  binsearch(arr,  x,  mid+1,  end);
7	FIND_IN_SORTED	successcompile	return  binsearch(arr,  x,  mid  -  start,  end);	return  binsearch(arr,  x,  mid+1,  end);
7	FIND_IN_SORTED	failcompile	rim(arr,  x,  mid,  end);	return  binsearch(arr,  x,  mid+1,  end);
7	FIND_IN_SORTED	successcompile	return  binsearch(arr,  x,  end,  mid);	return  binsearch(arr,  x,  mid+1,  end);
7	FIND_IN_SORTED	failcompile	return  binsearch(arr,  x,  start,  end,  end);	return  binsearch(arr,  x,  mid+1,  end);
7	FIND_IN_SORTED	successcompile	return  binsearch(arr,  x,  start,  end);	return  binsearch(arr,  x,  mid+1,  end);
7	FIND_IN_SORTED	failcompile	return  binsearch(arr,  x,  start,  end,  mid);	return  binsearch(arr,  x,  mid+1,  end);
7	FIND_IN_SORTED	failcompile	return  binsearch(arr,  x,  mid,  end,  start);	return  binsearch(arr,  x,  mid+1,  end);
7	FIND_IN_SORTED	successcompile	return  binsearch(arr,  x,  start,  end  +  1);	return  binsearch(arr,  x,  mid+1,  end);
7	FIND_IN_SORTED	failcompile	return  binsearch(arr[0],  x,  mid,  end);	return  binsearch(arr,  x,  mid+1,  end);
7	FIND_IN_SORTED	successcompile	return  binsearch(arr,  x,  start  -  start,  end);	return  binsearch(arr,  x,  mid+1,  end);
7	FIND_IN_SORTED	successcompile	return  binsearch(arr,  x,  end  -  start,  mid);	return  binsearch(arr,  x,  mid+1,  end);
7	FIND_IN_SORTED	failcompile	return  binsearch(arr,  x,  start,  end,  start);	return  binsearch(arr,  x,  mid+1,  end);
7	FIND_IN_SORTED	failcompile	n  =  binsearch(arr,  x,  mid,  end);	return  binsearch(arr,  x,  mid+1,  end);
7	FIND_IN_SORTED	successcompile	return  binsearch(arr,  x,  end  -  start,  end);	return  binsearch(arr,  x,  mid+1,  end);
7	FIND_IN_SORTED	failcompile	=  binsearch(arr,  x,  mid,  end);	return  binsearch(arr,  x,  mid+1,  end);
7	FIND_IN_SORTED	failcompile	return  binsearch(arr,  x,  mid,  end,  end);	return  binsearch(arr,  x,  mid+1,  end);
7	FIND_IN_SORTED	failcompile	|=  binsearch(arr,  x,  mid,  end);	return  binsearch(arr,  x,  mid+1,  end);
7	FIND_IN_SORTED	successcompile	return  binsearch(arr,  x,  mid,  end  -  1);	return  binsearch(arr,  x,  mid+1,  end);
7	FIND_IN_SORTED	successcompile	return  binsearch(arr,  x,  mid,  end+1);	return  binsearch(arr,  x,  mid+1,  end);
7	FIND_IN_SORTED	successcompile	return  binsearch(arr,  x,  start  +  1,  end  +  1);	return  binsearch(arr,  x,  mid+1,  end);
7	FIND_IN_SORTED	failcompile	x  =  binsearch(arr,  x,  mid,  end);	return  binsearch(arr,  x,  mid+1,  end);
7	FIND_IN_SORTED	failcompile	rim(arr,  x,  start,  end);	return  binsearch(arr,  x,  mid+1,  end);
7	FIND_IN_SORTED	failcompile	rim();	return  binsearch(arr,  x,  mid+1,  end);
16	LEVENSHTEIN	successcompile	return  1  +  levenshtein(source.substring(1),  target.substring(1));	return  levenshtein(source.substring(1),  target.substring(1));
16	LEVENSHTEIN	successcompile	return  1  +  source.length()  +  levenshtein(source.substring(1),  target.substring(1));	return  levenshtein(source.substring(1),  target.substring(1));
16	LEVENSHTEIN	failcompile	return  1  +  source.substring(1)  +  levenshtein(source.substring(1),  target.substring(1));	return  levenshtein(source.substring(1),  target.substring(1));
16	LEVENSHTEIN	successcompile	return  1  +  levenshtein(source.substring(1),  target.substring(1));	return  levenshtein(source.substring(1),  target.substring(1));
16	LEVENSHTEIN	failcompile	return  1  +  Math.min(Math.min(source.substring(1),  source.substring(1),  target.substring(1)));	return  levenshtein(source.substring(1),  target.substring(1));
16	LEVENSHTEIN	failcompile	if  (source.length()  ==  target.length())  return  1  +  levenshtein(source.substring(1),  target.substring(1));	return  levenshtein(source.substring(1),  target.substring(1));
16	LEVENSHTEIN	successcompile	if  (source.length()  >  1)  return  1  +  levenshtein(source.substring(1),  target.substring(1));  else  return  0;	return  levenshtein(source.substring(1),  target.substring(1));
16	LEVENSHTEIN	failcompile	if  (source.length()  >  0)  return  1  +  levenshtein(source.substring(1),  target.substring(1));	return  levenshtein(source.substring(1),  target.substring(1));
16	LEVENSHTEIN	failcompile	if  (source.length()  >  1)  return  1  +  levenshtein(source.substring(1),  target.substring(1));	return  levenshtein(source.substring(1),  target.substring(1));
16	LEVENSHTEIN	successcompile	if  (source.length()  >  1)  return  1  +  levenshtein(source.substring(1),  target.substring(1));  return  0;	return  levenshtein(source.substring(1),  target.substring(1));
16	LEVENSHTEIN	failcompile	if  (source.length()  ==  0)  return  1  +  levenshtein(source.substring(1),  target.substring(1));	return  levenshtein(source.substring(1),  target.substring(1));
16	LEVENSHTEIN	successcompile	if  (source.length()  ==  1)  return  1  +  levenshtein(source.substring(1),  target.substring(1));  return  0;	return  levenshtein(source.substring(1),  target.substring(1));
16	LEVENSHTEIN	failcompile	result  =  1  +  levenshtein(source.substring(1),  target.substring(1));  return  result);	return  levenshtein(source.substring(1),  target.substring(1));
16	LEVENSHTEIN	failcompile	return  target.substring(1)  +  levenshtein(source.substring(1),  target.substring(1));	return  levenshtein(source.substring(1),  target.substring(1));
16	LEVENSHTEIN	failcompile	if  (source.length()  ==  1)  {  return  1  +  levenshtein(source.substring(1),  target.substring(1));  }	return  levenshtein(source.substring(1),  target.substring(1));
16	LEVENSHTEIN	passHumanTest	return  0  +  levenshtein(source.substring(1),  target.substring(1));	return  levenshtein(source.substring(1),  target.substring(1));
16	LEVENSHTEIN	failcompile	return  Math.min(Math.min(source.substring(1),  target.substring(1)),  source.substring(1),  target.substring(1));	return  levenshtein(source.substring(1),  target.substring(1));
16	LEVENSHTEIN	failcompile	+  levenshtein(source.substring(1),  target.substring(1));	return  levenshtein(source.substring(1),  target.substring(1));
16	LEVENSHTEIN	failcompile	return  1  +  Math.min(Math.min(source.substring(1),  target.substring(1)),  source.substring(1));	return  levenshtein(source.substring(1),  target.substring(1));
16	LEVENSHTEIN	failcompile	return  1  +  levenshtein(source.substring(1),  target.substring(1),  source.length());	return  levenshtein(source.substring(1),  target.substring(1));
16	LEVENSHTEIN	failcompile	return  1  +  Math.min(Math.min(source.substring(1),source.substring(1),  target.substring(1)));	return  levenshtein(source.substring(1),  target.substring(1));
16	LEVENSHTEIN	failcompile	if  (source.length()  ==  1)  return  1  +  levenshtein(source.substring(1),  target.substring(1));	return  levenshtein(source.substring(1),  target.substring(1));
16	LEVENSHTEIN	failcompile	return  1  +  Math.min(Math.min(source.substring(1),  target.substring(1),  target.substring(1)));	return  levenshtein(source.substring(1),  target.substring(1));
16	LEVENSHTEIN	failcompile	return  1  +  levenshtein(source.substring(1),  target.substring(1),  source.substring(1));	return  levenshtein(source.substring(1),  target.substring(1));
16	LEVENSHTEIN	failcompile	return  1  +  Math.min(Math.min(source.substring(1),  target.substring(1)));	return  levenshtein(source.substring(1),  target.substring(1));
16	LEVENSHTEIN	failcompile	shtein(source.substring(1),  target.substring(1));	return  levenshtein(source.substring(1),  target.substring(1));
16	LEVENSHTEIN	successcompile	return  1  +  levenshtein(source.substring(1),  source.substring(1));	return  levenshtein(source.substring(1),  target.substring(1));
16	LEVENSHTEIN	failcompile	return  Math.min(Math.min(source.substring(1),  target.substring(1)),  source.substring(1));	return  levenshtein(source.substring(1),  target.substring(1));
16	LEVENSHTEIN	failcompile	enshtein(source.substring(1),  target.substring(1));	return  levenshtein(source.substring(1),  target.substring(1));
16	LEVENSHTEIN	failcompile	son(source.substring(1),  target.substring(1));	return  levenshtein(source.substring(1),  target.substring(1));
14	KNAPSACK	successcompile	if  (weight  <  j)  {	else  if  (weight  <  =  j)  {
14	KNAPSACK	failcompile	if  (weight  <  =  j)  {	else  if  (weight  <  =  j)  {
14	KNAPSACK	identical	else  if  (weight  <  =  j)  {	else  if  (weight  <  =  j)  {
14	KNAPSACK	successcompile	if  (weight  <  j)  {	else  if  (weight  <  =  j)  {
14	KNAPSACK	successcompile	if  (weight  >  j)  {	else  if  (weight  <  =  j)  {
14	KNAPSACK	failcompile	if  (j  <  =  0)  {	else  if  (weight  <  =  j)  {
14	KNAPSACK	successcompile	if  (  weight  <  j)  {	else  if  (weight  <  =  j)  {
14	KNAPSACK	successcompile	else  if  (weight  >  j)  {	else  if  (weight  <  =  j)  {
14	KNAPSACK	successcompile	if  (j  >  0)  {	else  if  (weight  <  =  j)  {
14	KNAPSACK	successcompile	if  (weight  >=  j)  {	else  if  (weight  <  =  j)  {
14	KNAPSACK	successcompile	if  (j  <  0)  {	else  if  (weight  <  =  j)  {
14	KNAPSACK	successcompile	if  (j  >=  0)  {	else  if  (weight  <  =  j)  {
14	KNAPSACK	failcompile	if  (weight  <  j)  {  break;	else  if  (weight  <  =  j)  {
14	KNAPSACK	successcompile	if  (j  ==  0)  {	else  if  (weight  <  =  j)  {
14	KNAPSACK	failcompile	if  (weight  <  j)  {  }	else  if  (weight  <  =  j)  {
14	KNAPSACK	failcompile	if  (j  <  =  weight)  {	else  if  (weight  <  =  j)  {
14	KNAPSACK	failcompile	if  (weight  <  =  j)  {	else  if  (weight  <  =  j)  {
14	KNAPSACK	successcompile	if  (i  <  j)  {	else  if  (weight  <  =  j)  {
14	KNAPSACK	successcompile	else  if  (weight  <  j)  {	else  if  (weight  <  =  j)  {
14	KNAPSACK	successcompile	if  (i  >=  0)  {	else  if  (weight  <  =  j)  {
14	KNAPSACK	failcompile	if  (j  <  =  i)  {	else  if  (weight  <  =  j)  {
14	KNAPSACK	failcompile	If  (weight  <  j)  {	else  if  (weight  <  =  j)  {
14	KNAPSACK	failcompile	If  (weight  <  =  j)  {	else  if  (weight  <  =  j)  {
14	KNAPSACK	successcompile	if  (  weight  >  j)  {	else  if  (weight  <  =  j)  {
14	KNAPSACK	failcompile	while  (weight  <  j)  {	else  if  (weight  <  =  j)  {
14	KNAPSACK	failcompile	If  (weight  <  j)  {	else  if  (weight  <  =  j)  {
14	KNAPSACK	successcompile	if  (j  >  1)  {	else  if  (weight  <  =  j)  {
14	KNAPSACK	failcompile	nan	else  if  (weight  <  =  j)  {
14	KNAPSACK	failcompile	else  {	else  if  (weight  <  =  j)  {
14	KNAPSACK	failcompile	)  {	else  if  (weight  <  =  j)  {
3	BUCKETSORT	successcompile	for  (Integer  count  :  sorted_arr)  {	for  (Integer  count  :  counts)  {
3	BUCKETSORT	failcompile	List  <  Integer>  count  =  new  ArrayList  <  Integer>(arr);  for  (Integer  count  :  count)  {	for  (Integer  count  :  counts)  {
3	BUCKETSORT	failcompile	List  <  Integer>  count  =  new  ArrayList  <  Integer>(argr);  for  (Integer  count  :  count)  {	for  (Integer  count  :  counts)  {
3	BUCKETSORT	failcompile	List  <  Integer>  count  =  new  ArrayList  <  Integer>(0);  for  (Integer  count  :  arr)  {	for  (Integer  count  :  counts)  {
3	BUCKETSORT	failcompile	List  <  Integer>  count  =  new  ArrayList  <  Integer>();  for  (Integer  count  :  arr)  {	for  (Integer  count  :  counts)  {
3	BUCKETSORT	failcompile	List  <  Integer>  count  =  new  ArrayList  <  Integer>();  for  (Integer  count  :  count)  {	for  (Integer  count  :  counts)  {
3	BUCKETSORT	failcompile	ArrayList  <  Integer>  count  =  new  ArrayList  <  Integer>();  for  (Integer  count  :  count)  {	for  (Integer  count  :  counts)  {
3	BUCKETSORT	failcompile	for  (Integer  count  :  arr.keySet())  {	for  (Integer  count  :  counts)  {
3	BUCKETSORT	failcompile	Integer  count  =  null;  for  (Integer  count  :  arr)  {	for  (Integer  count  :  counts)  {
3	BUCKETSORT	failcompile	List  <  Integer>  count;  for  (Integer  count  :  arr)  {	for  (Integer  count  :  counts)  {
3	BUCKETSORT	successcompile	for  (Integer  count  :  arr)  {	for  (Integer  count  :  counts)  {
3	BUCKETSORT	failcompile	For  (Integer  count  :  sorted_arr)  {	for  (Integer  count  :  counts)  {
3	BUCKETSORT	failcompile	for  (Integer  count  :  arr.iterator().next())  {	for  (Integer  count  :  counts)  {
3	BUCKETSORT	failcompile	for  (Integer  count  :  arr.toArray())  {	for  (Integer  count  :  counts)  {
3	BUCKETSORT	successcompile	for  (Integer  count  :  arr.toArray(new  Integer[0]))  {	for  (Integer  count  :  counts)  {
3	BUCKETSORT	failcompile	For  (Integer  count  :  sorted_arr)  {	for  (Integer  count  :  counts)  {
3	BUCKETSORT	failcompile	for  (Integer  count  :  arr.get())  {	for  (Integer  count  :  counts)  {
3	BUCKETSORT	failcompile	for  (Integer  count  :  new  Integer[]  {  arr  }  )  {	for  (Integer  count  :  counts)  {
3	BUCKETSORT	failcompile	for  (Integer  count  :  arr.values())  {	for  (Integer  count  :  counts)  {
3	BUCKETSORT	failcompile	for  (Integer  count  :  arr.size())  {	for  (Integer  count  :  counts)  {
3	BUCKETSORT	failcompile	for  (Integer  count  :  sorted_arr.keySet())  {	for  (Integer  count  :  counts)  {
3	BUCKETSORT	failcompile	for  (Integer  count  :  arr.get(0))  {	for  (Integer  count  :  counts)  {
3	BUCKETSORT	successcompile	for  (Integer  count  :  sorted_arr)  {	for  (Integer  count  :  counts)  {
3	BUCKETSORT	failcompile	for  (Integer  count  :  new  Integer(arr))  {	for  (Integer  count  :  counts)  {
3	BUCKETSORT	failcompile	for  (Integer  count  :  arr.toInt())  {	for  (Integer  count  :  counts)  {
3	BUCKETSORT	failcompile	for  (Integer  count  :  all_arr)  {	for  (Integer  count  :  counts)  {
3	BUCKETSORT	failcompile	For  (Integer  count  :  arr)  {	for  (Integer  count  :  counts)  {
3	BUCKETSORT	failcompile	for  (Integer  count  :  arr,int  k)  {	for  (Integer  count  :  counts)  {
3	BUCKETSORT	failcompile	for  (Integer  count  :  null)  {	for  (Integer  count  :  counts)  {
3	BUCKETSORT	failcompile	for  (Integer  count  :  sorted_arr.get(0))  {	for  (Integer  count  :  counts)  {
4	DEPTH_FIRST_SEARCH	successcompile	if  (node  ==  null)  {  return  false;  }	nodesvisited.add(node);
4	DEPTH_FIRST_SEARCH	successcompile	if  (node  ==  null)  {  return  true;  }	nodesvisited.add(node);
4	DEPTH_FIRST_SEARCH	failcompile	if  (node  ==  null)  {  continue;  }	nodesvisited.add(node);
4	DEPTH_FIRST_SEARCH	failcompile	search(successornodes)  {  return  true;  }	nodesvisited.add(node);
4	DEPTH_FIRST_SEARCH	successcompile	if  (node  ==  node)  {  return  true;  }	nodesvisited.add(node);
4	DEPTH_FIRST_SEARCH	failcompile	if  (node  ==  goalnode)  {  continue;  }	nodesvisited.add(node);
4	DEPTH_FIRST_SEARCH	failcompile	search(startnode,  goalnode)  {  return  true;  }	nodesvisited.add(node);
4	DEPTH_FIRST_SEARCH	successcompile	if  (node  ==  node)  {  return  false;  }	nodesvisited.add(node);
4	DEPTH_FIRST_SEARCH	successcompile	if  (node  ==  goalnode)  {  return  true;  }	nodesvisited.add(node);
4	DEPTH_FIRST_SEARCH	failcompile	search(startnode,  goalnode)  {  return  false;  }	nodesvisited.add(node);
4	DEPTH_FIRST_SEARCH	successcompile	if(node  ==  null)  {  return  false;  }	nodesvisited.add(node);
4	DEPTH_FIRST_SEARCH	failcompile	search(successornodes))  {  return  true;  }	nodesvisited.add(node);
4	DEPTH_FIRST_SEARCH	failcompile	if  (node  ==  goal)  {  return  true;  }	nodesvisited.add(node);
4	DEPTH_FIRST_SEARCH	failcompile	search(successornodes)  {  return  false;  }	nodesvisited.add(node);
4	DEPTH_FIRST_SEARCH	failcompile	if  (node  ==  node)  {  continue;  }	nodesvisited.add(node);
4	DEPTH_FIRST_SEARCH	failcompile	if(node  ==  null)  {  continue;  }	nodesvisited.add(node);
4	DEPTH_FIRST_SEARCH	failcompile	search(successornodes);	nodesvisited.add(node);
4	DEPTH_FIRST_SEARCH	failcompile	search(startnode)  {  return  true;  }	nodesvisited.add(node);
4	DEPTH_FIRST_SEARCH	successcompile	if  (false)  {  return  true;  }	nodesvisited.add(node);
4	DEPTH_FIRST_SEARCH	failcompile	search(startnode,  goalnode);	nodesvisited.add(node);
4	DEPTH_FIRST_SEARCH	successcompile	node  =  node;	nodesvisited.add(node);
4	DEPTH_FIRST_SEARCH	failcompile	.save();	nodesvisited.add(node);
4	DEPTH_FIRST_SEARCH	failcompile	.reset();	nodesvisited.add(node);
4	DEPTH_FIRST_SEARCH	failcompile	return  false;	nodesvisited.add(node);
4	DEPTH_FIRST_SEARCH	failcompile	return  true;	nodesvisited.add(node);
4	DEPTH_FIRST_SEARCH	failcompile	return  true;	nodesvisited.add(node);
4	DEPTH_FIRST_SEARCH	failcompile	result  =  true;	nodesvisited.add(node);
4	DEPTH_FIRST_SEARCH	failcompile	return  false;	nodesvisited.add(node);
4	DEPTH_FIRST_SEARCH	successcompile	;	nodesvisited.add(node);
4	DEPTH_FIRST_SEARCH	failcompile	nan	nodesvisited.add(node);
33	TO_BASE	successcompile	result  =  result  +   "   "  +  String.valueOf(alphabet.charAt(i));	result  =  String.valueOf(alphabet.charAt(i))+result;
33	TO_BASE	successcompile	result  =  result  +  String.valueOf(alphabet.charAt(i));	result  =  String.valueOf(alphabet.charAt(i))+result;
33	TO_BASE	failcompile	result  +  String.valueOf(alphabet.charAt(i));	result  =  String.valueOf(alphabet.charAt(i))+result;
33	TO_BASE	successcompile	result  =  result  +  String.valueOf((char)alphabet.charAt(i));	result  =  String.valueOf(alphabet.charAt(i))+result;
33	TO_BASE	failcompile	=  result  +   "   "  +  String.valueOf(alphabet.charAt(i));	result  =  String.valueOf(alphabet.charAt(i))+result;
33	TO_BASE	failcompile	=  result  +  String.valueOf((char)alphabet.charAt(i));	result  =  String.valueOf(alphabet.charAt(i))+result;
33	TO_BASE	successcompile	result  =  result  +  String.valueOf(alphabet.charAt(i));	result  =  String.valueOf(alphabet.charAt(i))+result;
33	TO_BASE	successcompile	result  =  result  +  String.valueOf(alphabet.charAt(i+1));	result  =  String.valueOf(alphabet.charAt(i))+result;
33	TO_BASE	failcompile	Result  =  result  +  String.valueOf(alphabet.charAt(i));	result  =  String.valueOf(alphabet.charAt(i))+result;
33	TO_BASE	successcompile	result  =  String.valueOf(alphabet.charAt(i));	result  =  String.valueOf(alphabet.charAt(i))+result;
33	TO_BASE	failcompile	=  result  +  String.valueOf(alphabet.charAt(i));	result  =  String.valueOf(alphabet.charAt(i))+result;
33	TO_BASE	failcompile	=  String.valueOf(alphabet.charAt(i));	result  =  String.valueOf(alphabet.charAt(i))+result;
33	TO_BASE	failcompile	=  result  +  String.valueOf(alphabet.charAt(i+1));	result  =  String.valueOf(alphabet.charAt(i))+result;
33	TO_BASE	failcompile	+  String.valueOf(alphabet.charAt(i));	result  =  String.valueOf(alphabet.charAt(i))+result;
33	TO_BASE	successcompile	result  =  result  +  String.valueOf(alphabet.charAt(b));	result  =  String.valueOf(alphabet.charAt(i))+result;
33	TO_BASE	successcompile	result  =  result  +  String.valueOf(alphabet.charAt(num));	result  =  String.valueOf(alphabet.charAt(i))+result;
33	TO_BASE	successcompile	result  =  result  +  String.valueOf(alphabet.charAt(i  +  1));	result  =  String.valueOf(alphabet.charAt(i))+result;
33	TO_BASE	failcompile	=  result  +  String.valueOf(alphabet.charAt(b));	result  =  String.valueOf(alphabet.charAt(i))+result;
33	TO_BASE	failcompile	result  =  result  +  String.valueOf(charAt(i));	result  =  String.valueOf(alphabet.charAt(i))+result;
33	TO_BASE	successcompile	result  =  String.valueOf(alphabet.charAt(i));	result  =  String.valueOf(alphabet.charAt(i))+result;
33	TO_BASE	failcompile	=  result  +  String.valueOf(alphabet.charAt(num));	result  =  String.valueOf(alphabet.charAt(i))+result;
33	TO_BASE	failcompile	=  String.valueOf(alphabet.charAt(i+1));	result  =  String.valueOf(alphabet.charAt(i))+result;
33	TO_BASE	failcompile	result  =  result  +  String.valueOf(charAt(i));	result  =  String.valueOf(alphabet.charAt(i))+result;
33	TO_BASE	failcompile	=  result  +  String.valueOf(alphabet.charAt(i)  +  1);	result  =  String.valueOf(alphabet.charAt(i))+result;
33	TO_BASE	failcompile	+  String.valueOf(alphabet.charAt(i+1));	result  =  String.valueOf(alphabet.charAt(i))+result;
33	TO_BASE	successcompile	result  =  result  +  String.valueOf(alphabet.charAt(i)  +  1);	result  =  String.valueOf(alphabet.charAt(i))+result;
33	TO_BASE	failcompile	=  result  +  String.valueOf(alphabet.charAt(i)  +  1);	result  =  String.valueOf(alphabet.charAt(i))+result;
33	TO_BASE	failcompile	=  result  +  String.valueOf(charAt(i));	result  =  String.valueOf(alphabet.charAt(i))+result;
33	TO_BASE	failcompile	=  result  +  String.valueOf(alphabet.charAt(i))  +   "   ";	result  =  String.valueOf(alphabet.charAt(i))+result;
33	TO_BASE	successcompile	;	result  =  String.valueOf(alphabet.charAt(i))+result;
5	DETECT_CYCLE	successcompile	if  (hare  ==  tortoise)	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
5	DETECT_CYCLE	successcompile	if  (hare  ==  tortoise  ||  hare.getSuccessor()  ==  null)	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
5	DETECT_CYCLE	successcompile	if  (hare  ==  tortoise)	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
5	DETECT_CYCLE	successcompile	if  (hare.getSuccessor()  ==  tortoise)	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
5	DETECT_CYCLE	successcompile	if  (hare  ==  tortoise  ||  tortoise  ==  tortoise)	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
5	DETECT_CYCLE	successcompile	if  (hare.getSuccessor()  ==  tortoise)	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
5	DETECT_CYCLE	successcompile	if  (hare  ==  tortoise  ||  tortoise  ==  tortoise)	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
5	DETECT_CYCLE	failcompile	If  (hare  ==  tortoise  ||  hare.getSuccessor()  ==  null)	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
5	DETECT_CYCLE	successcompile	if  (hare!=  tortoise)	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
5	DETECT_CYCLE	successcompile	if  (hare!=  tortoise)	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
5	DETECT_CYCLE	successcompile	if  (hare  ==  tortoise  &&  tortoise  ==  tortoise)	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
5	DETECT_CYCLE	successcompile	if  (hare.getSuccessor()!=  null)	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
5	DETECT_CYCLE	successcompile	if  (hare.getSuccessor().getSuccessor()  ==  tortoise)	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
5	DETECT_CYCLE	successcompile	if  (hare.getSuccessor()!=  null)	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
5	DETECT_CYCLE	failcompile	if  (hare  ==  tortoise)  return  false;	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
5	DETECT_CYCLE	successcompile	if  (hare!=  tortoise  ||  tortoise  ==  tortoise)	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
5	DETECT_CYCLE	successcompile	if  (hare.getSuccessor()!=  tortoise)	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
5	DETECT_CYCLE	failcompile	if  (hare  ==  tortoise)  return  false;	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
5	DETECT_CYCLE	successcompile	if  (hare  ==  tortoise.getSuccessor())	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
5	DETECT_CYCLE	successcompile	if  (hare.getSuccessor()!=  tortoise)	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
5	DETECT_CYCLE	failcompile	If  (hare.getSuccessor()  ==  tortoise)	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
5	DETECT_CYCLE	failcompile	If  (hare  ==  tortoise)	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
5	DETECT_CYCLE	failcompile	if  (hare  ==  tortoise)  return  true;	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
5	DETECT_CYCLE	failcompile	If  (hare  ==  tortoise)	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
5	DETECT_CYCLE	successcompile	;  if  (hare  ==  tortoise)	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
5	DETECT_CYCLE	failcompile	If  (hare!=  tortoise)	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
5	DETECT_CYCLE	successcompile	if  (hare==  tortoise)	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
5	DETECT_CYCLE	failcompile	If  (hare!=  tortoise)	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
5	DETECT_CYCLE	successcompile	if  (hare==null)	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
5	DETECT_CYCLE	failcompile	nan	if  (null  ==  hare  ||hare.getSuccessor()  ==  null)
32	SQRT	successcompile	while  (Math.abs(x-approx)  >=  epsilon)  {	while  (Math.abs(x-approx*approx)  >  epsilon)  {
32	SQRT	failcompile	while  (Math.abs(x-approx)  <  =  epsilon)  {	while  (Math.abs(x-approx*approx)  >  epsilon)  {
32	SQRT	successcompile	while  (Math.abs(x-approx)  <  epsilon)  {	while  (Math.abs(x-approx*approx)  >  epsilon)  {
32	SQRT	successcompile	while  (Math.abs(x-approx-1)  >=  epsilon)  {	while  (Math.abs(x-approx*approx)  >  epsilon)  {
32	SQRT	successcompile	while  (Math.abs(x  -  approx)  >  epsilon)  {	while  (Math.abs(x-approx*approx)  >  epsilon)  {
32	SQRT	successcompile	while  (Math.abs(x-epsilon)  >  epsilon)  {	while  (Math.abs(x-approx*approx)  >  epsilon)  {
32	SQRT	successcompile	while  (Math.abs(x-(approx-1))  >  epsilon)  {	while  (Math.abs(x-approx*approx)  >  epsilon)  {
32	SQRT	successcompile	while  (Math.abs(x-approx)  >=  epsilon)  {	while  (Math.abs(x-approx*approx)  >  epsilon)  {
32	SQRT	failcompile	whilst  (Math.abs(x-approx)  >  epsilon)  {	while  (Math.abs(x-approx*approx)  >  epsilon)  {
32	SQRT	successcompile	while  (Math.abs(x  -  epsilon)  >=  epsilon)  {	while  (Math.abs(x-approx*approx)  >  epsilon)  {
32	SQRT	successcompile	while  (Math.abs((x-approx))  >  epsilon)  {	while  (Math.abs(x-approx*approx)  >  epsilon)  {
32	SQRT	successcompile	while  (Math.abs(x-approx)  ==  epsilon)  {	while  (Math.abs(x-approx*approx)  >  epsilon)  {
32	SQRT	failcompile	whilst  (Math.abs(x-approx)  >=  epsilon)  {	while  (Math.abs(x-approx*approx)  >  epsilon)  {
32	SQRT	failcompile	while  (Math.abs(y-approx)  >  epsilon)  {	while  (Math.abs(x-approx*approx)  >  epsilon)  {
32	SQRT	failcompile	while  (Math.abs(x-approx-1)  <  =  epsilon)  {	while  (Math.abs(x-approx*approx)  >  epsilon)  {
32	SQRT	failcompile	while  (!Math.abs(x-approx)  >  epsilon)  {	while  (Math.abs(x-approx*approx)  >  epsilon)  {
32	SQRT	successcompile	while  (Math.abs(x-approx-2)  >=  epsilon)  {	while  (Math.abs(x-approx*approx)  >  epsilon)  {
32	SQRT	successcompile	while  (Math.abs(x  -  epsilon)  >  epsilon)  {	while  (Math.abs(x-approx*approx)  >  epsilon)  {
32	SQRT	successcompile	while  (Math.abs(x-approx)  >  epsilon)  {	while  (Math.abs(x-approx*approx)  >  epsilon)  {
32	SQRT	successcompile	while  (Math.abs(x-approx)  >  epsilon)  {	while  (Math.abs(x-approx*approx)  >  epsilon)  {
32	SQRT	successcompile	while  (Math.abs(x-approx)!=  epsilon)  {	while  (Math.abs(x-approx*approx)  >  epsilon)  {
32	SQRT	failcompile	while  (Math.abs(value-approx)  >  epsilon)  {	while  (Math.abs(x-approx*approx)  >  epsilon)  {
32	SQRT	successcompile	if  (Math.abs(x-approx)  >  epsilon)  {	while  (Math.abs(x-approx*approx)  >  epsilon)  {
32	SQRT	successcompile	while  ((Math.abs(x-approx))  >  epsilon)  {	while  (Math.abs(x-approx*approx)  >  epsilon)  {
32	SQRT	successcompile	while  (Math.abs(x-approx-1)  <  epsilon)  {	while  (Math.abs(x-approx*approx)  >  epsilon)  {
32	SQRT	successcompile	if  (Math.abs(x-approx)  >  epsilon)  {	while  (Math.abs(x-approx*approx)  >  epsilon)  {
32	SQRT	successcompile	epsilon  =  Math.abs(x-approx);  while  (epsilon  >  0)  {	while  (Math.abs(x-approx*approx)  >  epsilon)  {
32	SQRT	successcompile	epsilon  =  Math.abs(x-approx);  while  (epsilon  <  0)  {	while  (Math.abs(x-approx*approx)  >  epsilon)  {
32	SQRT	successcompile	while  (Math.abs(x-approx)  <  approx)  {	while  (Math.abs(x-approx*approx)  >  epsilon)  {
32	SQRT	failcompile	while  (Math.abs(x-approx)  >=  epsilon)  {  return  approx;	while  (Math.abs(x-approx*approx)  >  epsilon)  {
26	REVERSE_LINKED_LIST	successcompile	if  (node  ==  null)  return  null;	prevnode  =  node;
26	REVERSE_LINKED_LIST	successcompile	if  (node  ==  null)  {  continue;  }	prevnode  =  node;
26	REVERSE_LINKED_LIST	failcompile	return_linked_list(node);	prevnode  =  node;
26	REVERSE_LINKED_LIST	successcompile	if  (node  ==  null)  return  null;	prevnode  =  node;
26	REVERSE_LINKED_LIST	successcompile	if  (node  ==  null)  {  continue;  }	prevnode  =  node;
26	REVERSE_LINKED_LIST	successcompile	if  (node  ==  null)  return  node;	prevnode  =  node;
26	REVERSE_LINKED_LIST	successcompile	if  (node  ==  null)  continue;	prevnode  =  node;
26	REVERSE_LINKED_LIST	successcompile	reverse_linked_list(node);	prevnode  =  node;
26	REVERSE_LINKED_LIST	failcompile	Node.reverse_linked_list(node);	prevnode  =  node;
26	REVERSE_LINKED_LIST	successcompile	if  (node  ==  null)  {  break;  }	prevnode  =  node;
26	REVERSE_LINKED_LIST	failcompile	.reverse_linked_list(node);	prevnode  =  node;
26	REVERSE_LINKED_LIST	failcompile	node.reverse_linked_list(node);	prevnode  =  node;
26	REVERSE_LINKED_LIST	successcompile	while  (node  ==  null)  {  continue;  }	prevnode  =  node;
26	REVERSE_LINKED_LIST	successcompile	node  =  node;	prevnode  =  node;
26	REVERSE_LINKED_LIST	successcompile	if  (node  ==  null)  continue;	prevnode  =  node;
26	REVERSE_LINKED_LIST	successcompile	node.setSuccessor(node);	prevnode  =  node;
26	REVERSE_LINKED_LIST	successcompile	node  =  null;	prevnode  =  node;
26	REVERSE_LINKED_LIST	successcompile	node  =  nextnode;	prevnode  =  node;
26	REVERSE_LINKED_LIST	failcompile	node.reverse_linked_list();	prevnode  =  node;
26	REVERSE_LINKED_LIST	successcompile	return(node);	prevnode  =  node;
26	REVERSE_LINKED_LIST	successcompile	node  =  null;	prevnode  =  node;
26	REVERSE_LINKED_LIST	successcompile	node  =  nextnode;	prevnode  =  node;
26	REVERSE_LINKED_LIST	successcompile	node  =  node;	prevnode  =  node;
26	REVERSE_LINKED_LIST	failcompile	.reverse_linked_list();	prevnode  =  node;
26	REVERSE_LINKED_LIST	failcompile	return_linked_list();	prevnode  =  node;
26	REVERSE_LINKED_LIST	failcompile	parent  =  parent;	prevnode  =  node;
26	REVERSE_LINKED_LIST	successcompile	;	prevnode  =  node;
26	REVERSE_LINKED_LIST	successcompile	continue;	prevnode  =  node;
26	REVERSE_LINKED_LIST	failcompile	();	prevnode  =  node;
26	REVERSE_LINKED_LIST	failcompile	nan	prevnode  =  node;
34	TOPOLOGICAL_ORDERING	successcompile	if  (!orderedNodes.containsAll(nextNode.getSuccessors())  &&!orderedNodes.contains(nextNode))  {	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
34	TOPOLOGICAL_ORDERING	successcompile	if  (!orderedNodes.containsAll(nextNode.getSuccessors())  &&!orderedNodes.contains(nextNode))  {	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
34	TOPOLOGICAL_ORDERING	successcompile	if  (orderedNodes.containsAll(nextNode.getSuccessors())  &&!orderedNodes.contains(nextNode))  {	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
34	TOPOLOGICAL_ORDERING	successcompile	if  (!orderedNodes.containsAll(nextNode.getSuccessors()))  {	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
34	TOPOLOGICAL_ORDERING	successcompile	if  (orderedNodes.containsAll(nextNode.getSuccessors()))  {	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
34	TOPOLOGICAL_ORDERING	successcompile	if  (orderedNodes.containsAll(nextNode.getSuccessors())  &&!orderedNodes.contains(nextNode.getPredecessors()))  {	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
34	TOPOLOGICAL_ORDERING	successcompile	if  (orderedNodes.containsAll(nextNode.getSuccessors())  &&!orderedNodes.contains(nextNode))  {	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
34	TOPOLOGICAL_ORDERING	failcompile	if  (nextNode!=  null  &&  orderedNodes.containsAll(nextNode.getSuccessors())  &&!nextNode.contains(nextNode))  {	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
34	TOPOLOGICAL_ORDERING	successcompile	if  (orderedNodes.containsAll(nextNode.getSuccessors())  &&!orderedNodes.contains(nextNode)  &&  listSize  >  0)  {	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
34	TOPOLOGICAL_ORDERING	successcompile	if  (listSize  >  0  &&  orderedNodes.containsAll(nextNode.getSuccessors())  &&!orderedNodes.contains(nextNode))  {	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
34	TOPOLOGICAL_ORDERING	successcompile	if  (nextNode.getSuccessors()!=  null  &&  orderedNodes.containsAll(nextNode.getSuccessors()))  {	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
34	TOPOLOGICAL_ORDERING	successcompile	if  (orderedNodes.containsAll(nextNode.getSuccessors())  &&!orderedNodes.contains(nextNode.getPredecessors()))  {	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
34	TOPOLOGICAL_ORDERING	successcompile	if  (orderedNodes.containsAll(nextNode.getSuccessors())  ||!orderedNodes.contains(nextNode))  {	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
34	TOPOLOGICAL_ORDERING	successcompile	if  (orderedNodes.containsAll(nextNode.getSuccessors())  &&!orderedNodes.contains(nextNode))  {  listSize++;	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
34	TOPOLOGICAL_ORDERING	successcompile	if  (!orderedNodes.containsAll(nextNode.getSuccessors())  &&!orderedNodes.contains(nextNode))  {  listSize++;	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
34	TOPOLOGICAL_ORDERING	successcompile	if  (orderedNodes.containsAll(nextNode.getSuccessors())  &&!nextNode.getPredecessors().contains(nextNode))  {	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
34	TOPOLOGICAL_ORDERING	successcompile	if  (nextNode!=  null  &&  orderedNodes.containsAll(nextNode.getSuccessors()))  {	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
34	TOPOLOGICAL_ORDERING	successcompile	if  (!orderedNodes.containsAll(nextNode.getSuccessors())  &&!orderedNodes.contains(nextNode.getPredecessors()))  {	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
34	TOPOLOGICAL_ORDERING	successcompile	if  (!orderedNodes.containsAll(nextNode.getSuccessors()))  {	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
34	TOPOLOGICAL_ORDERING	identical	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
34	TOPOLOGICAL_ORDERING	successcompile	if  (nextNode.getSuccessors().isEmpty()  &&  orderedNodes.containsAll(nextNode.getSuccessors()))  {	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
34	TOPOLOGICAL_ORDERING	successcompile	if  (!orderedNodes.containsAll(nextNode.getSuccessors())  ||!orderedNodes.contains(nextNode))  {	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
34	TOPOLOGICAL_ORDERING	failcompile	If  (orderedNodes.containsAll(nextNode.getSuccessors())  &&!orderedNodes.contains(nextNode))  {	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
34	TOPOLOGICAL_ORDERING	successcompile	if  (orderedNodes.containsAll(nextNode.getSuccessors())  ||!orderedNodes.contains(nextNode))  {	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
34	TOPOLOGICAL_ORDERING	successcompile	if  (orderedNodes.containsAll(nextNode.getSuccessors()))  {	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
34	TOPOLOGICAL_ORDERING	successcompile	if  (nextNode.getSuccessors()!=  null  &&  orderedNodes.containsAll(nextNode.getSuccessors()))  {	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
34	TOPOLOGICAL_ORDERING	successcompile	if  (nextNode!=  null  &&  orderedNodes.containsAll(nextNode.getSuccessors()))  {	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
34	TOPOLOGICAL_ORDERING	successcompile	if  (orderedNodes.containsAll(nextNode.getSuccessors()))  {  listSize++;	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
34	TOPOLOGICAL_ORDERING	successcompile	if  (nextNode!=  null  &&  orderedNodes.containsAll(nextNode.getSuccessors()))  {	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
34	TOPOLOGICAL_ORDERING	failcompile	If  (orderedNodes.containsAll(nextNode.getSuccessors()))  {	if  (orderedNodes.containsAll(nextNode.getPredecessors())  &&!orderedNodes.contains(nextNode))  {
25	QUICKSORT	failcompile	if  (x  >  pivot)  {	}  else  if  (x  >=  pivot)  {
25	QUICKSORT	failcompile	else  if  (x  >=  pivot)  {	}  else  if  (x  >=  pivot)  {
25	QUICKSORT	successcompile	;  }  else  if  (x  >=  pivot)  {	}  else  if  (x  >=  pivot)  {
25	QUICKSORT	successcompile	;  }  else  if  (x  >  pivot)  {	}  else  if  (x  >=  pivot)  {
25	QUICKSORT	identical	}  else  if  (x  >=  pivot)  {	}  else  if  (x  >=  pivot)  {
25	QUICKSORT	failcompile	if  (x  >=  pivot)  {	}  else  if  (x  >=  pivot)  {
25	QUICKSORT	successcompile	//  else  if  (x  >  pivot)  {	}  else  if  (x  >=  pivot)  {
25	QUICKSORT	failcompile	+=  pivot;  }  else  if  (x  >=  pivot)  {	}  else  if  (x  >=  pivot)  {
25	QUICKSORT	failcompile	next();  }  else  if  (x  >  pivot)  {	}  else  if  (x  >=  pivot)  {
25	QUICKSORT	successcompile	;  }  else  if  (x  >  pivot  ||  x  <  pivot)  {	}  else  if  (x  >=  pivot)  {
25	QUICKSORT	failcompile	/*  else  if  (x  >  pivot)*/  {	}  else  if  (x  >=  pivot)  {
25	QUICKSORT	successcompile	continue;  }  else  if  (x  >  pivot)  {	}  else  if  (x  >=  pivot)  {
25	QUICKSORT	successcompile	;  }  else  if  (x  >  pivot  ||  x  >  pivot)  {	}  else  if  (x  >=  pivot)  {
25	QUICKSORT	failcompile	else  if  (!x.isEmpty())  {	}  else  if  (x  >=  pivot)  {
25	QUICKSORT	failcompile	others  if  (x  >  pivot)  {	}  else  if  (x  >=  pivot)  {
25	QUICKSORT	failcompile	else  if  (!x.equals(  pivot))  {	}  else  if  (x  >=  pivot)  {
25	QUICKSORT	failcompile	else  if  (x!=  pivot)  {	}  else  if  (x  >=  pivot)  {
25	QUICKSORT	failcompile	if  (x  >  pivot)  {	}  else  if  (x  >=  pivot)  {
25	QUICKSORT	failcompile	if  (x!=  pivot)  {	}  else  if  (x  >=  pivot)  {
25	QUICKSORT	successcompile	;  }  else  if  (x  >  pivot  +  1)  {	}  else  if  (x  >=  pivot)  {
25	QUICKSORT	failcompile	if  (x  <  pivot)  {	}  else  if  (x  >=  pivot)  {
25	QUICKSORT	failcompile	if  (y  >  pivot)  {	}  else  if  (x  >=  pivot)  {
25	QUICKSORT	successcompile	//  if  (x  >  pivot)  {	}  else  if  (x  >=  pivot)  {
25	QUICKSORT	failcompile	else  if  (x  <  pivot)  {	}  else  if  (x  >=  pivot)  {
25	QUICKSORT	failcompile	else  if  (y  >  pivot)  {	}  else  if  (x  >=  pivot)  {
25	QUICKSORT	failcompile	while  (x  >  pivot)  {	}  else  if  (x  >=  pivot)  {
25	QUICKSORT	failcompile	/*  else  if  (x  >  pivot)  {	}  else  if  (x  >=  pivot)  {
25	QUICKSORT	failcompile	else  if  (x  >  pivot)  {	}  else  if  (x  >=  pivot)  {
25	QUICKSORT	failcompile	&&  x  >  pivot)  {	}  else  if  (x  >=  pivot)  {
25	QUICKSORT	failcompile	nan	}  else  if  (x  >=  pivot)  {
21	NEXT_PALINDROME	successcompile	otherwise.addAll(Collections.nCopies(digit_list.length,  1));	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
21	NEXT_PALINDROME	successcompile	otherwise.addAll(Collections.nCopies(digit_list[high_mid],  0));	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
21	NEXT_PALINDROME	successcompile	otherwise.addAll(Collections.nCopies(digit_list[low_mid],  0));	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
21	NEXT_PALINDROME	successcompile	otherwise.addAll(Collections.nCopies(digit_list.length  -  1,  0));	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
21	NEXT_PALINDROME	successcompile	otherwise.addAll(Collections.nCopies(digit_list.length,  0));	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
21	NEXT_PALINDROME	failcompile	otherwise.addAll(Collections.nCopies(digit_list[high_mid]));	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
21	NEXT_PALINDROME	failcompile	otherwise.addAll(Collections.nCopies(digit_list[low_mid]));	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
21	NEXT_PALINDROME	successcompile	otherwise.addAll(Collections.singleton(digit_list[high_mid]));	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
21	NEXT_PALINDROME	successcompile	otherwise.addAll(Collections.nCopies(digit_list.length,  1));	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
21	NEXT_PALINDROME	successcompile	otherwise.addAll(Collections.nCopies(digit_list.length,  2));	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
21	NEXT_PALINDROME	failcompile	otherwise.addAll(Collections.enCopies(digit_list.length,  0));	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
21	NEXT_PALINDROME	successcompile	otherwise.addAll(Collections.singleton(digit_list[low_mid]));	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
21	NEXT_PALINDROME	failcompile	otherwise.addAll(Collections.nCopies(digit_list[0].length,  0));	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
21	NEXT_PALINDROME	successcompile	otherwise.addAll(Collections.nCopies(digit_list.length,  low_mid));	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
21	NEXT_PALINDROME	failcompile	otherwise.addAll(Collections.singleton(digit_list[high_mid],  0));	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
21	NEXT_PALINDROME	successcompile	otherwise.addAll(Collections.nCopies(digit_list.length,  10));	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
21	NEXT_PALINDROME	successcompile	otherwise.addAll(Collections.nCopies(digit_list.length,  high_mid));	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
21	NEXT_PALINDROME	failcompile	otherwise.addAll(Collections.getCopies(digit_list.length,  0));	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
21	NEXT_PALINDROME	successcompile	otherwise.addAll(Collections.nCopies(digit_list.length,  3));	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
21	NEXT_PALINDROME	successcompile	otherwise.addAll(Collections.nCopies(digit_list[0],  0));	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
21	NEXT_PALINDROME	failcompile	otherwise.addAll(Collections.copies(digit_list.length,  0));	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
21	NEXT_PALINDROME	failcompile	otherwise.addAll(Collections.nCopies(digit_list[high_mid]  +  1));	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
21	NEXT_PALINDROME	successcompile	otherwise.addAll(Collections.nCopies(digit_list.length,  2));	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
21	NEXT_PALINDROME	successcompile	otherwise.addAll(Collections.nCopies(digit_list.length,  3));	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
21	NEXT_PALINDROME	failcompile	otherwise.addAll(Collections.nCopies(digit_list[low_mid]  +  1));	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
21	NEXT_PALINDROME	successcompile	otherwise.addAll(Collections.singleton(digit_list.length));	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
21	NEXT_PALINDROME	failcompile	otherwise.addAll(Collections.singleton(digit_list));	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
21	NEXT_PALINDROME	failcompile	otherwise.addAll(Collections.nCopies(digit_list[high_mid]  -  1));	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
21	NEXT_PALINDROME	failcompile	otherwise.addAll(Collections.nCopies(digit_list[low_mid]  -  1));	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
21	NEXT_PALINDROME	successcompile	next_palindrome(digit_list);	otherwise.addAll(Collections.nCopies(digit_list.length-1,  0));
28	SHORTEST_PATH_LENGTH	failcompile	unvisitedNodes.get(nextnode)  +  length_by_edge.get(Arrays.asList(node,  nextnode)));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
28	SHORTEST_PATH_LENGTH	successcompile	unvisitedNodes.get(nextnode)  +  length_by_edge.get(Arrays.asList(node,  nextnode))));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
28	SHORTEST_PATH_LENGTH	successcompile	unvisitedNodes.get(nextnode)  +  length_by_edge.get(Arrays.asList(node,  nextnode))));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
28	SHORTEST_PATH_LENGTH	failcompile	nodes.get(nextnode)  +  length_by_edge.get(Arrays.asList(node,  nextnode))));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
28	SHORTEST_PATH_LENGTH	failcompile	unvisitedNodes.get(nextnode)  +  length_by_edge.get(Arrays.asList(node,  nextnode)));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
28	SHORTEST_PATH_LENGTH	failcompile	(unvisitedNodes.get(nextnode)  +  length_by_edge.get(Arrays.asList(node,  nextnode))));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
28	SHORTEST_PATH_LENGTH	successcompile	unvisitedNodes.get(nextnode)  +  length_by_edge.get(Arrays.asList(startnode,  nextnode))));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
28	SHORTEST_PATH_LENGTH	failcompile	unvisitedNodes.get(nextnode)  +  length_by_edge.get(Arrays.asList(nextnode,  nextnode)));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
28	SHORTEST_PATH_LENGTH	failcompile	UnvisitedNodes.get(nextnode)  +  length_by_edge.get(Arrays.asList(node,  nextnode))));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
28	SHORTEST_PATH_LENGTH	successcompile	unvisitedNodes.get(nextnode)  +  length_by_edge.get(Arrays.asList(startnode,  nextnode))));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
28	SHORTEST_PATH_LENGTH	failcompile	=  unvisitedNodes.get(nextnode)  +  length_by_edge.get(Arrays.asList(node,  nextnode)));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
28	SHORTEST_PATH_LENGTH	failcompile	UnvisitedNodes.get(nextnode)  +  length_by_edge.get(Arrays.asList(node,  nextnode)));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
28	SHORTEST_PATH_LENGTH	failcompile	unvisitedNodes.get(nextnode)  +  length_by_edge.get(Arrays.asList(nextnode,  nextnode)));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
28	SHORTEST_PATH_LENGTH	failcompile	=  unvisitedNodes.get(nextnode)  +  length_by_edge.get(Arrays.asList(node,  nextnode))));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
28	SHORTEST_PATH_LENGTH	failcompile	Nodes.get(nextnode)  +  length_by_edge.get(Arrays.asList(node,  nextnode))));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
28	SHORTEST_PATH_LENGTH	failcompile	losedNodes.get(nextnode)  +  length_by_edge.get(Arrays.asList(node,  nextnode))));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
28	SHORTEST_PATH_LENGTH	failcompile	.get(nextnode)  +  length_by_edge.get(Arrays.asList(node,  nextnode))));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
28	SHORTEST_PATH_LENGTH	failcompile	nodes.get(nextnode)  +  length_by_edge.get(Arrays.asList(node,  nextnode)));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
28	SHORTEST_PATH_LENGTH	failcompile	Node.get(nextnode)  +  length_by_edge.get(Arrays.asList(node,  nextnode))));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
28	SHORTEST_PATH_LENGTH	failcompile	unvisitedNodes.get(nextnode)  +  (length_by_edge.get(Arrays.asList(node,  nextnode))));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
28	SHORTEST_PATH_LENGTH	failcompile	unvisitedNodes.get(nextnode)  +  length_by_edge.get(Arrays.asList(node,  nextnode));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
28	SHORTEST_PATH_LENGTH	failcompile	(unvisitedNodes.get(nextnode)  +  length_by_edge.get(Arrays.asList(node,  nextnode))));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
28	SHORTEST_PATH_LENGTH	failcompile	UnvisitedNodes.get(nextnode)  +  length_by_edge.get(Arrays.asList(nextnode,  nextnode)));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
28	SHORTEST_PATH_LENGTH	failcompile	unvisitedNodes.get(nextnode)  +  length_by_edge.get(Arrays.asList(node,  nextnode)))));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
28	SHORTEST_PATH_LENGTH	failcompile	unvisitedNodes.get(nextnode)  +  length_by_edge.get(Arrays.asList(node,  nextnode)))));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
28	SHORTEST_PATH_LENGTH	failcompile	unvisitedNodes.get(nextnode)  +  (length_by_edge.get(Arrays.asList(node,  nextnode))));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
28	SHORTEST_PATH_LENGTH	failcompile	Nodes.get(nextnode)  +  length_by_edge.get(Arrays.asList(node,  nextnode)));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
28	SHORTEST_PATH_LENGTH	failcompile	(nextnode)  +  length_by_edge.get(Arrays.asList(node,  nextnode))));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
28	SHORTEST_PATH_LENGTH	successcompile	+  length_by_edge.get(Arrays.asList(node,  nextnode))));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
28	SHORTEST_PATH_LENGTH	failcompile	+  length_by_edge.get(Arrays.asList(node,  nextnode)));	distance  +  length_by_edge.get(Arrays.asList(node,  nextnode))));
9	GCD	failcompile	gcd(a  %  b,  b);	return  gcd(b,  a%b);
9	GCD	failcompile	gcd(a  %  b,  b);	return  gcd(b,  a%b);
9	GCD	failcompile	gcd(b,  a  %  b);	return  gcd(b,  a%b);
9	GCD	failcompile	gcd(a  %  b,  b,  b);	return  gcd(b,  a%b);
9	GCD	successcompile	return  gcd(a  %  b,  b);	return  gcd(b,  a%b);
9	GCD	successcompile	return  gcd(a  %  b,  b);	return  gcd(b,  a%b);
9	GCD	failcompile	gcd(b  %  a,  b);	return  gcd(b,  a%b);
9	GCD	failcompile	n  =  gcd(a  %  b,  b);	return  gcd(b,  a%b);
9	GCD	failcompile	=  gcd(a  %  b,  b);	return  gcd(b,  a%b);
9	GCD	failcompile	gcd(a  %  b,  b)  {  }	return  gcd(b,  a%b);
9	GCD	failcompile	gcd(a  %  b,  b  %  b);	return  gcd(b,  a%b);
9	GCD	failcompile	gcd(a  %  b,  b  -  1);	return  gcd(b,  a%b);
9	GCD	failcompile	gcd(a  %  b,  b  -  b);	return  gcd(b,  a%b);
9	GCD	failcompile	gcd(a  %  b,  b,  a);	return  gcd(b,  a%b);
9	GCD	failcompile	gcd(a  %  b,  b,  b);	return  gcd(b,  a%b);
9	GCD	failcompile	b  =  gcd(a  %  b,  b);	return  gcd(b,  a%b);
9	GCD	successcompile	++a;  return  gcd(b,  b);	return  gcd(b,  a%b);
9	GCD	failcompile	cd(a  %  b,  b);	return  gcd(b,  a%b);
9	GCD	failcompile	gcd(a  %  b,  b  +  1);	return  gcd(b,  a%b);
9	GCD	failcompile	gcd(a  %  b  -  1,  b);	return  gcd(b,  a%b);
9	GCD	failcompile	gcd(a  %  b  %  b,  b);	return  gcd(b,  a%b);
9	GCD	failcompile	gcd(b,  a  %  b);	return  gcd(b,  a%b);
9	GCD	successcompile	gcd(a  %  b,  b);  return  b;	return  gcd(b,  a%b);
9	GCD	failcompile	m  =  gcd(a  %  b,  b);	return  gcd(b,  a%b);
9	GCD	failcompile	gcd(b  %  b,  a);	return  gcd(b,  a%b);
9	GCD	failcompile	gcd(a  %  b,  b  -  a);	return  gcd(b,  a%b);
9	GCD	failcompile	return  gcd(a  %  b,  b,  b);	return  gcd(b,  a%b);
9	GCD	failcompile	gcd(a  *  b,  b);	return  gcd(b,  a%b);
9	GCD	failcompile	cd(a  %  b,  b);	return  gcd(b,  a%b);
9	GCD	failcompile	gcd(b  %  a);	return  gcd(b,  a%b);
23	PASCAL	failcompile	for  (int  c=0;  c  <  =  r;  c++)  {	for  (int  c=0;  c  <  r+1;  c++)  {
23	PASCAL	failcompile	for  (int  c=1;  c  <  =  r;  c++)  {	for  (int  c=0;  c  <  r+1;  c++)  {
23	PASCAL	successcompile	for  (int  c=1;  c  <  r;  c++)  {	for  (int  c=0;  c  <  r+1;  c++)  {
23	PASCAL	failcompile	For  (int  c=0;  c  <  =  r;  c++)  {	for  (int  c=0;  c  <  r+1;  c++)  {
23	PASCAL	successcompile	for  (int  c=0;  c  <  r-1;  c++)  {	for  (int  c=0;  c  <  r+1;  c++)  {
23	PASCAL	failcompile	for  (int  c=0;  c  <  =  r;  c++)  {	for  (int  c=0;  c  <  r+1;  c++)  {
23	PASCAL	failcompile	(int  c=0;  c  <  =  r;  c++)  {	for  (int  c=0;  c  <  r+1;  c++)  {
23	PASCAL	successcompile	for  (int  c=0;  c  <  r;  c++)  {	for  (int  c=0;  c  <  r+1;  c++)  {
23	PASCAL	failcompile	For  (int  c=0;  c  <  =  r;  c++)  {	for  (int  c=0;  c  <  r+1;  c++)  {
23	PASCAL	failcompile	for  (int  c=0;  c  <  =r;  c++)  {	for  (int  c=0;  c  <  r+1;  c++)  {
23	PASCAL	failcompile	For  (int  c=1;  c  <  =  r;  c++)  {	for  (int  c=0;  c  <  r+1;  c++)  {
23	PASCAL	failcompile	For  (int  c=1;  c  <  r;  c++)  {	for  (int  c=0;  c  <  r+1;  c++)  {
23	PASCAL	failcompile	for  (int  c=0;  c  <  =  r-1;  c++)  {	for  (int  c=0;  c  <  r+1;  c++)  {
23	PASCAL	failcompile	For  (int  c=0;  c  <  r-1;  c++)  {	for  (int  c=0;  c  <  r+1;  c++)  {
23	PASCAL	failcompile	for  (int  c=1;  c  <  =  r;  c++)  {	for  (int  c=0;  c  <  r+1;  c++)  {
23	PASCAL	failcompile	for  (int  c  =  0;  c  <  =  r;  c++)  {	for  (int  c=0;  c  <  r+1;  c++)  {
23	PASCAL	failcompile	for  (int  c=-1;  c  <  =  r;  c++)  {	for  (int  c=0;  c  <  r+1;  c++)  {
23	PASCAL	successcompile	for  (int  c=0;  c  <  r  +  1;  c++)  {	for  (int  c=0;  c  <  r+1;  c++)  {
23	PASCAL	successcompile	for  (int  c=1;  c  <  r;  c++)  {	for  (int  c=0;  c  <  r+1;  c++)  {
23	PASCAL	successcompile	for  (int  c=0;  c  <  r-1;  c++)  {	for  (int  c=0;  c  <  r+1;  c++)  {
23	PASCAL	identical	for  (int  c=0;  c  <  r+1;  c++)  {	for  (int  c=0;  c  <  r+1;  c++)  {
23	PASCAL	successcompile	for  (int  c=0;  c  <  row.size();  c++)  {	for  (int  c=0;  c  <  r+1;  c++)  {
23	PASCAL	failcompile	for  (int  c  =  1;  c  <  =  r;  c++)  {	for  (int  c=0;  c  <  r+1;  c++)  {
23	PASCAL	successcompile	for  (int  c=-1;  c  <  r;  c++)  {	for  (int  c=0;  c  <  r+1;  c++)  {
23	PASCAL	failcompile	(int  c=1;  c  <  r;  c++)  {	for  (int  c=0;  c  <  r+1;  c++)  {
23	PASCAL	failcompile	For  (int  c=1;  c  <  r;  c++)  {	for  (int  c=0;  c  <  r+1;  c++)  {
23	PASCAL	failcompile	For  (int  c=0;  c  <  r;  c++)  {	for  (int  c=0;  c  <  r+1;  c++)  {
23	PASCAL	failcompile	for  (int  c=0;  (c  <  =  r);  c++)  {	for  (int  c=0;  c  <  r+1;  c++)  {
23	PASCAL	failcompile	for  (int  c=1)  {	for  (int  c=0;  c  <  r+1;  c++)  {
23	PASCAL	failcompile	)  {	for  (int  c=0;  c  <  r+1;  c++)  {
36	SUBSEQUENCES	successcompile	return  new  ArrayList  <  >();	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
36	SUBSEQUENCES	failcompile	ArrayList  <  >  base  =  new  ArrayList();  return  base;	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
36	SUBSEQUENCES	failcompile	return  new  ArrayList  <  ArrayList  <  ArrayList>();	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
36	SUBSEQUENCES	successcompile	ArrayList  ret  =  new  ArrayList();	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
36	SUBSEQUENCES	successcompile	ArrayList  <  ArrayList>  base  =  new  ArrayList();	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
36	SUBSEQUENCES	successcompile	ArrayList  base  =  new  ArrayList();  return  base;	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
36	SUBSEQUENCES	failcompile	ret  =  new  ArrayList();	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
36	SUBSEQUENCES	failcompile	ArrayList  <  >  base  =  new  ArrayList();	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
36	SUBSEQUENCES	successcompile	return  new  ArrayList  <  ArrayList>();	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
36	SUBSEQUENCES	successcompile	ArrayList  result  =  new  ArrayList();  return  result;	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
36	SUBSEQUENCES	failcompile	new  ArrayList  <  ArrayList  <  ArrayList>();	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
36	SUBSEQUENCES	successcompile	ArrayList  list  =  new  ArrayList();  return  list;	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
36	SUBSEQUENCES	failcompile	return  new  ArrayList  <  ArrayList  <  >();	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
36	SUBSEQUENCES	successcompile	ArrayList  ret  =  new  ArrayList(50);	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
36	SUBSEQUENCES	successcompile	ArrayList  base  =  new  ArrayList();	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
36	SUBSEQUENCES	successcompile	new  ArrayList  <  ArrayList>();	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
36	SUBSEQUENCES	successcompile	new  ArrayList  <  >();	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
36	SUBSEQUENCES	failcompile	ret  =  new  ArrayList();	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
36	SUBSEQUENCES	successcompile	return  new  ArrayList();	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
36	SUBSEQUENCES	failcompile	=  new  ArrayList();	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
36	SUBSEQUENCES	failcompile	result  =  new  ArrayList();	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
36	SUBSEQUENCES	failcompile	n  =  new  ArrayList();	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
36	SUBSEQUENCES	failcompile	return  ret;	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
36	SUBSEQUENCES	failcompile	.addAll(ret);	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
36	SUBSEQUENCES	successcompile	new  ArrayList();	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
36	SUBSEQUENCES	successcompile	return  null;	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
36	SUBSEQUENCES	failcompile	rim();	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
36	SUBSEQUENCES	failcompile	return  base;	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
36	SUBSEQUENCES	failcompile	continue;	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
36	SUBSEQUENCES	successcompile	;	ArrayList  empty_set  =  new  ArrayList  <  ArrayList>();  empty_set.add(new  ArrayList());  return  empty_set;
10	GET_FACTORS	successcompile	return  new  ArrayList  <  Integer>();	return  new  ArrayList  <  Integer>(Arrays.asList(n));
10	GET_FACTORS	failcompile	result  =  new  ArrayList  <  Integer>();  return  result;	return  new  ArrayList  <  Integer>(Arrays.asList(n));
10	GET_FACTORS	failcompile	=  new  ArrayList  <  Integer>();	return  new  ArrayList  <  Integer>(Arrays.asList(n));
10	GET_FACTORS	failcompile	n  =  new  ArrayList  <  Integer>();	return  new  ArrayList  <  Integer>(Arrays.asList(n));
10	GET_FACTORS	failcompile	new  ArrayList  <  Integer>();	return  new  ArrayList  <  Integer>(Arrays.asList(n));
10	GET_FACTORS	failcompile	ArrayList  <  >  return  new  ArrayList  <  Integer>();	return  new  ArrayList  <  Integer>(Arrays.asList(n));
10	GET_FACTORS	successcompile	return  new  ArrayList  <  Integer>(0);	return  new  ArrayList  <  Integer>(Arrays.asList(n));
10	GET_FACTORS	successcompile	return  new  ArrayList  <  Integer>(n);	return  new  ArrayList  <  Integer>(Arrays.asList(n));
10	GET_FACTORS	successcompile	return  new  ArrayList  <  Integer>();	return  new  ArrayList  <  Integer>(Arrays.asList(n));
10	GET_FACTORS	failcompile	n  =  new  ArrayList  <  Integer>();	return  new  ArrayList  <  Integer>(Arrays.asList(n));
10	GET_FACTORS	failcompile	n  =  new  ArrayList  <  Integer>();  return  n;	return  new  ArrayList  <  Integer>(Arrays.asList(n));
10	GET_FACTORS	failcompile	n  =  new  ArrayList  <  Integer>();  return  prepend;	return  new  ArrayList  <  Integer>(Arrays.asList(n));
10	GET_FACTORS	failcompile	.addAll(get_factors(n  /  i));	return  new  ArrayList  <  Integer>(Arrays.asList(n));
10	GET_FACTORS	failcompile	n  =  new  ArrayList  <  Integer>();  return  null;	return  new  ArrayList  <  Integer>(Arrays.asList(n));
10	GET_FACTORS	failcompile	ArrayList  <  Integer>  prepend;  return  prepend;	return  new  ArrayList  <  Integer>(Arrays.asList(n));
10	GET_FACTORS	failcompile	n  =  new  ArrayList  <  Integer>();  returnn;	return  new  ArrayList  <  Integer>(Arrays.asList(n));
10	GET_FACTORS	failcompile	ArrayList  <  Integer>  prepend;	return  new  ArrayList  <  Integer>(Arrays.asList(n));
10	GET_FACTORS	failcompile	=  new  ArrayList  <  Integer>();  return  prepend;	return  new  ArrayList  <  Integer>(Arrays.asList(n));
10	GET_FACTORS	successcompile	return  new  ArrayList  <  Integer>(1);	return  new  ArrayList  <  Integer>(Arrays.asList(n));
10	GET_FACTORS	failcompile	ArrayList  <  Integer>  return  prepend;	return  new  ArrayList  <  Integer>(Arrays.asList(n));
10	GET_FACTORS	failcompile	result  =  new  ArrayList  <  Integer>();	return  new  ArrayList  <  Integer>(Arrays.asList(n));
10	GET_FACTORS	failcompile	new  ArrayList  <  Integer>(n);	return  new  ArrayList  <  Integer>(Arrays.asList(n));
10	GET_FACTORS	failcompile	return  prepend;	return  new  ArrayList  <  Integer>(Arrays.asList(n));
10	GET_FACTORS	failcompile	new  ArrayList  <  Integer>(0);	return  new  ArrayList  <  Integer>(Arrays.asList(n));
10	GET_FACTORS	failcompile	ArrayList  <  Integer>  prepend  =  null;	return  new  ArrayList  <  Integer>(Arrays.asList(n));
10	GET_FACTORS	failcompile	return  get_factors(n  /  i);	return  new  ArrayList  <  Integer>(Arrays.asList(n));
10	GET_FACTORS	successcompile	return  get_factors(n);	return  new  ArrayList  <  Integer>(Arrays.asList(n));
10	GET_FACTORS	successcompile	return  new  ArrayList  <  >();	return  new  ArrayList  <  Integer>(Arrays.asList(n));
10	GET_FACTORS	failcompile	n  =  0;  return  prepend;	return  new  ArrayList  <  Integer>(Arrays.asList(n));
10	GET_FACTORS	failcompile	get_factors(n);	return  new  ArrayList  <  Integer>(Arrays.asList(n));
13	KHEAPSORT	successcompile	for  (Integer  x  :  arr.subList(0,k))  {	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
13	KHEAPSORT	failcompile	for  (Integer  x  :  heap.subList(0,k))  {	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
13	KHEAPSORT	failcompile	for  (Integer  x  :  heap.poll())  {	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
13	KHEAPSORT	successcompile	for  (Integer  x  :  arr)  {	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
13	KHEAPSORT	failcompile	(Integer  x  :  arr.subList(0,k)))  {	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
13	KHEAPSORT	failcompile	For  (Integer  x  :  arr.subList(0,k))  {	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
13	KHEAPSORT	failcompile	for  (Integer  x  :  heap.iterator().next())  {	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
13	KHEAPSORT	failcompile	for  (Integer  x  :  heap.toArray())  {	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
13	KHEAPSORT	failcompile	for  (Integer  x  :  kheapsort)  {	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
13	KHEAPSORT	failcompile	for  (Integer  x  :  heap.keySet())  {	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
13	KHEAPSORT	failcompile	for  (Integer  x  :  heap.size())  {	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
13	KHEAPSORT	failcompile	for  (Integer  x  :  heap.values())  {	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
13	KHEAPSORT	failcompile	for  (Integer  x  :  heap.get())  {	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
13	KHEAPSORT	failcompile	for  (Integer  y  :  arr)  {	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
13	KHEAPSORT	failcompile	continue;  for  (Integer  x  :  arr)  {	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
13	KHEAPSORT	failcompile	for  (Integer  x  :  heap.get(x))  {	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
13	KHEAPSORT	failcompile	//For  (Integer  x  :  arr)  {	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
13	KHEAPSORT	failcompile	For  (Integer  x  :  heap.poll())  {	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
13	KHEAPSORT	failcompile	for  (Integer  x  :  heap.get(k))  {	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
13	KHEAPSORT	successcompile	for  (Integer  x  :  heap)  {	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
13	KHEAPSORT	failcompile	for  (Integer  x  :  heap.subList(0,  k))  {	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
13	KHEAPSORT	failcompile	For  (Integer  x  :  arr)  {	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
13	KHEAPSORT	failcompile	for  (Integer  x  :  heap.get(0))  {	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
13	KHEAPSORT	successcompile	for  (int  x  :  arr)  {	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
13	KHEAPSORT	failcompile	for  (Integer  x  :  heap.remove(x))  {	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
13	KHEAPSORT	failcompile	(Integer  x  :  arr)  {	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
13	KHEAPSORT	failcompile	for  (Integer  x  :  kheap.poll())  {	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
13	KHEAPSORT	failcompile	continue;  for  (Integer  x  :  arr)  {  continue;	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
13	KHEAPSORT	failcompile	for  (Integer  x  :  heap.poll());	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
13	KHEAPSORT	failcompile	for  (Integer  x  :  heap.poll().toInt())  {	for  (Integer  x  :  arr.subList(k,  arr.size()))  {
17	LIS	successcompile	longest  =  length;	longest  =  Math.max(longest,length  +  1);
17	LIS	successcompile	longest  =  length  +  1;	longest  =  Math.max(longest,length  +  1);
17	LIS	successcompile	longest  =  length+1;	longest  =  Math.max(longest,length  +  1);
17	LIS	successcompile	longest  =  length  -  1;	longest  =  Math.max(longest,length  +  1);
17	LIS	successcompile	longest  =  length  +  i;	longest  =  Math.max(longest,length  +  1);
17	LIS	successcompile	longest  =  length  +  2;	longest  =  Math.max(longest,length  +  1);
17	LIS	successcompile	longest  =  length;  i++;	longest  =  Math.max(longest,length  +  1);
17	LIS	failcompile	long  longest  =  length  +  1;	longest  =  Math.max(longest,length  +  1);
17	LIS	successcompile	longest  =  length  +  1;	longest  =  Math.max(longest,length  +  1);
17	LIS	successcompile	length  =  length  +  1;	longest  =  Math.max(longest,length  +  1);
17	LIS	failcompile	Long  longest  =  length  +  1;	longest  =  Math.max(longest,length  +  1);
17	LIS	failcompile	longest  =  length  +  j;	longest  =  Math.max(longest,length  +  1);
17	LIS	successcompile	longest  =  length  +  0;	longest  =  Math.max(longest,length  +  1);
17	LIS	failcompile	lest  =  length  +  1;	longest  =  Math.max(longest,length  +  1);
17	LIS	successcompile	longest  =  length  +  val;	longest  =  Math.max(longest,length  +  1);
17	LIS	successcompile	length  =  length;	longest  =  Math.max(longest,length  +  1);
17	LIS	successcompile	longest  =  length  -  i;	longest  =  Math.max(longest,length  +  1);
17	LIS	failcompile	shortest  =  length  +  1;	longest  =  Math.max(longest,length  +  1);
17	LIS	successcompile	i++;  longest  =  length;	longest  =  Math.max(longest,length  +  1);
17	LIS	successcompile	longest  =  length  +  3;	longest  =  Math.max(longest,length  +  1);
17	LIS	successcompile	longest  =  length  +  1  +  1;	longest  =  Math.max(longest,length  +  1);
17	LIS	failcompile	longest  =  length.length();	longest  =  Math.max(longest,length  +  1);
17	LIS	successcompile	longest  =  length;  length  =  length;	longest  =  Math.max(longest,length  +  1);
17	LIS	successcompile	longest  =  length+1;	longest  =  Math.max(longest,length  +  1);
17	LIS	successcompile	longest  =  length  *  2;	longest  =  Math.max(longest,length  +  1);
17	LIS	failcompile	long  longest  =  length;	longest  =  Math.max(longest,length  +  1);
17	LIS	successcompile	length  =  length+1;	longest  =  Math.max(longest,length  +  1);
17	LIS	successcompile	longest  =  length;	longest  =  Math.max(longest,length  +  1);
17	LIS	successcompile	longest  =  0;	longest  =  Math.max(longest,length  +  1);
17	LIS	successcompile	length  +=  1;	longest  =  Math.max(longest,length  +  1);
31	SIEVE	failcompile	if  (list_comp(n,  primes))  {	if  (all(list_comp(n,  primes)))  {
31	SIEVE	successcompile	if  (list_comp(n,  primes)  ==  null)  {	if  (all(list_comp(n,  primes)))  {
31	SIEVE	failcompile	if  (!list_comp(n,  primes))  {	if  (all(list_comp(n,  primes)))  {
31	SIEVE	failcompile	if  (list_comp(n,  max))  {	if  (all(list_comp(n,  primes)))  {
31	SIEVE	successcompile	if  (list_comp(n,  primes)!=  null)  {	if  (all(list_comp(n,  primes)))  {
31	SIEVE	failcompile	if  (list_comp(n,  primes))  {	if  (all(list_comp(n,  primes)))  {
31	SIEVE	successcompile	if  (list_comp(n,  primes)  ==  null)  {	if  (all(list_comp(n,  primes)))  {
31	SIEVE	failcompile	if  (!list_comp(n,  primes))  {	if  (all(list_comp(n,  primes)))  {
31	SIEVE	failcompile	if  (list_comp(n,  max))  {	if  (all(list_comp(n,  primes)))  {
31	SIEVE	failcompile	if  (list_comp(n,  primes,  max))  {	if  (all(list_comp(n,  primes)))  {
31	SIEVE	failcompile	if  (list_comp(n,  primes)  ==  false)  {	if  (all(list_comp(n,  primes)))  {
31	SIEVE	failcompile	if  (list_comp(n+1,  primes))  {	if  (all(list_comp(n,  primes)))  {
31	SIEVE	failcompile	if  (list_comp(n,  primes)  >  0)  {	if  (all(list_comp(n,  primes)))  {
31	SIEVE	failcompile	if  (list_comp(n,  null))  {	if  (all(list_comp(n,  primes)))  {
31	SIEVE	failcompile	if  (list_comp(n,  primes)  ==  0)  {	if  (all(list_comp(n,  primes)))  {
31	SIEVE	failcompile	if  (list_comp(max,  primes))  {	if  (all(list_comp(n,  primes)))  {
31	SIEVE	failcompile	if  (list_comp(n  +  1,  primes))  {	if  (all(list_comp(n,  primes)))  {
31	SIEVE	failcompile	If  (list_comp(n,  primes))  {	if  (all(list_comp(n,  primes)))  {
31	SIEVE	failcompile	if  (list_comp(n,  primes)!=  0)  {	if  (all(list_comp(n,  primes)))  {
31	SIEVE	failcompile	if  (list_comp(n,  n))  {	if  (all(list_comp(n,  primes)))  {
31	SIEVE	failcompile	If  (list_comp(n,  primes))  {	if  (all(list_comp(n,  primes)))  {
31	SIEVE	failcompile	if  (list_comp(n,  primes)  >=  0)  {	if  (all(list_comp(n,  primes)))  {
31	SIEVE	successcompile	if  (any(list_comp(n,  primes)))  {	if  (all(list_comp(n,  primes)))  {
31	SIEVE	failcompile	if  (list_comp(n,  primes)  ==  true)  {	if  (all(list_comp(n,  primes)))  {
31	SIEVE	failcompile	if  (list_comp(n,  primes,  max))  {	if  (all(list_comp(n,  primes)))  {
31	SIEVE	failcompile	if  (list_comp(n,  0))  {	if  (all(list_comp(n,  primes)))  {
31	SIEVE	failcompile	if  (list_comp(n,  primes)  ==  false)  {	if  (all(list_comp(n,  primes)))  {
31	SIEVE	failcompile	if  (list_comp(n,  max+1))  {	if  (all(list_comp(n,  primes)))  {
31	SIEVE	failcompile	if  (list_comp(n,  primes.size()))  {	if  (all(list_comp(n,  primes)))  {
31	SIEVE	successcompile	if  (any(list_comp(n,  primes)))  {	if  (all(list_comp(n,  primes)))  {
