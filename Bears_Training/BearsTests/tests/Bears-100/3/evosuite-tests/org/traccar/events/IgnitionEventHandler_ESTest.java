/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 09 23:51:25 GMT 2019
 */

package org.traccar.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.ChannelHandler;
import org.jboss.netty.channel.ChannelHandlerContext;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.channel.DefaultChildChannelStateEvent;
import org.jboss.netty.channel.DefaultExceptionEvent;
import org.jboss.netty.channel.DefaultWriteCompletionEvent;
import org.jboss.netty.channel.local.DefaultLocalServerChannelFactory;
import org.jboss.netty.channel.local.LocalServerChannel;
import org.junit.runner.RunWith;
import org.traccar.Context;
import org.traccar.database.IdentityManager;
import org.traccar.events.IgnitionEventHandler;
import org.traccar.model.Device;
import org.traccar.model.Event;
import org.traccar.model.Position;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IgnitionEventHandler_ESTest extends IgnitionEventHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IgnitionEventHandler ignitionEventHandler0 = new IgnitionEventHandler();
      Position position0 = new Position();
      // Undeclared exception!
      try { 
        ignitionEventHandler0.analyzePosition(position0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.events.IgnitionEventHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      IgnitionEventHandler ignitionEventHandler0 = new IgnitionEventHandler();
      IdentityManager identityManager0 = mock(IdentityManager.class, new ViolatedAssumptionAnswer());
      doReturn((Device) null, (Device) null).when(identityManager0).getDeviceById(anyLong());
      Context.init(identityManager0);
      Position position0 = new Position();
      ignitionEventHandler0.analyzePosition(position0);
      ignitionEventHandler0.analyzePosition(position0);
      IdentityManager identityManager1 = mock(IdentityManager.class, new ViolatedAssumptionAnswer());
      doReturn((Device) null, (Device) null, (Device) null, (Device) null).when(identityManager1).getDeviceById(anyLong());
      Context.init(identityManager1);
      ignitionEventHandler0.analyzePosition(position0);
      ignitionEventHandler0.analyzePosition(position0);
      ignitionEventHandler0.analyzePosition(position0);
      ignitionEventHandler0.analyzePosition(position0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      IgnitionEventHandler ignitionEventHandler0 = new IgnitionEventHandler();
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      defaultChannelPipeline0.getContext((ChannelHandler) ignitionEventHandler0);
      defaultChannelPipeline0.getChannel();
      DefaultChildChannelStateEvent defaultChildChannelStateEvent0 = null;
      try {
        defaultChildChannelStateEvent0 = new DefaultChildChannelStateEvent((Channel) null, (Channel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // parentChannel
         //
         verifyException("org.jboss.netty.channel.DefaultChildChannelStateEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      IgnitionEventHandler ignitionEventHandler0 = new IgnitionEventHandler();
      assertNotNull(ignitionEventHandler0);
      
      IdentityManager identityManager0 = mock(IdentityManager.class, new ViolatedAssumptionAnswer());
      doReturn((Device) null, (Device) null, (Device) null, (Device) null, (Device) null).when(identityManager0).getDeviceById(anyLong());
      Context.init(identityManager0);
      Position position0 = new Position();
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertFalse(position0.getOutdated());
      assertEquals(0L, position0.getDeviceId());
      assertNull(position0.getType());
      assertEquals(0L, position0.getId());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertNull(position0.getProtocol());
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertFalse(position0.getValid());
      assertNotNull(position0);
      
      Collection<Event> collection0 = ignitionEventHandler0.analyzePosition(position0);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertFalse(position0.getOutdated());
      assertEquals(0L, position0.getDeviceId());
      assertNull(position0.getType());
      assertEquals(0L, position0.getId());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertNull(position0.getProtocol());
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertFalse(position0.getValid());
      assertNull(collection0);
      
      Collection<Event> collection1 = ignitionEventHandler0.analyzePosition(position0);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertFalse(position0.getOutdated());
      assertEquals(0L, position0.getDeviceId());
      assertNull(position0.getType());
      assertEquals(0L, position0.getId());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertNull(position0.getProtocol());
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertFalse(position0.getValid());
      assertNull(collection1);
      
      Collection<Event> collection2 = ignitionEventHandler0.analyzePosition(position0);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertFalse(position0.getOutdated());
      assertEquals(0L, position0.getDeviceId());
      assertNull(position0.getType());
      assertEquals(0L, position0.getId());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertNull(position0.getProtocol());
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertFalse(position0.getValid());
      assertNull(collection2);
      
      position0.setTime((Date) null);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertFalse(position0.getOutdated());
      assertEquals(0L, position0.getDeviceId());
      assertNull(position0.getType());
      assertEquals(0L, position0.getId());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertNull(position0.getProtocol());
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertFalse(position0.getValid());
      
      Collection<Event> collection3 = ignitionEventHandler0.analyzePosition(position0);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertFalse(position0.getOutdated());
      assertEquals(0L, position0.getDeviceId());
      assertNull(position0.getType());
      assertEquals(0L, position0.getId());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertNull(position0.getProtocol());
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertFalse(position0.getValid());
      assertNull(collection3);
      
      Collection<Event> collection4 = ignitionEventHandler0.analyzePosition(position0);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertFalse(position0.getOutdated());
      assertEquals(0L, position0.getDeviceId());
      assertNull(position0.getType());
      assertEquals(0L, position0.getId());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertNull(position0.getProtocol());
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertFalse(position0.getValid());
      assertNull(collection4);
      
      Collection<Event> collection5 = ignitionEventHandler0.analyzePosition(position0);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertFalse(position0.getOutdated());
      assertEquals(0L, position0.getDeviceId());
      assertNull(position0.getType());
      assertEquals(0L, position0.getId());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertNull(position0.getProtocol());
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertFalse(position0.getValid());
      assertNull(collection5);
      
      Collection<Event> collection6 = ignitionEventHandler0.analyzePosition(position0);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertFalse(position0.getOutdated());
      assertEquals(0L, position0.getDeviceId());
      assertNull(position0.getType());
      assertEquals(0L, position0.getId());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertNull(position0.getProtocol());
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertFalse(position0.getValid());
      assertNull(collection6);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      Class<ChannelHandler> class0 = ChannelHandler.class;
      ChannelHandlerContext channelHandlerContext0 = defaultChannelPipeline0.getContext(class0);
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNull(channelHandlerContext0);
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertTrue(localServerChannel0.isReadable());
      assertTrue(localServerChannel0.isOpen());
      assertEquals(1, (int)localServerChannel0.getId());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertNotNull(localServerChannel0);
      
      MockThrowable mockThrowable0 = new MockThrowable("-4KKF", (Throwable) null);
      assertNotNull(mockThrowable0);
      
      DefaultExceptionEvent defaultExceptionEvent0 = new DefaultExceptionEvent(localServerChannel0, mockThrowable0);
      assertTrue(localServerChannel0.isReadable());
      assertTrue(localServerChannel0.isOpen());
      assertEquals(1, (int)localServerChannel0.getId());
      assertEquals("-4KKF", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: -4KKF", mockThrowable0.toString());
      assertTrue(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultExceptionEvent0);
      
      try { 
        ignitionEventHandler0.handleUpstream((ChannelHandlerContext) null, defaultExceptionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.handler.codec.oneone.OneToOneDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IgnitionEventHandler ignitionEventHandler0 = new IgnitionEventHandler();
      assertNotNull(ignitionEventHandler0);
      
      Position position0 = new Position();
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertNull(position0.getProtocol());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertEquals(0L, position0.getId());
      assertFalse(position0.getOutdated());
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertNull(position0.getAddress());
      assertFalse(position0.getValid());
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0L, position0.getDeviceId());
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertNull(position0.getType());
      assertNotNull(position0);
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNotNull(defaultChannelPipeline0);
      
      ChannelHandlerContext channelHandlerContext0 = defaultChannelPipeline0.getContext("status");
      assertFalse(defaultChannelPipeline0.isAttached());
      assertNull(channelHandlerContext0);
      
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      assertNotNull(defaultLocalServerChannelFactory0);
      
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      assertTrue(defaultChannelPipeline0.isAttached());
      assertTrue(localServerChannel0.isOpen());
      assertTrue(localServerChannel0.isReadable());
      assertEquals(0, (int)localServerChannel0.getId());
      assertNotNull(localServerChannel0);
      
      DefaultWriteCompletionEvent defaultWriteCompletionEvent0 = null;
      try {
        defaultWriteCompletionEvent0 = new DefaultWriteCompletionEvent(localServerChannel0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // writtenAmount must be a positive integer: -1
         //
         verifyException("org.jboss.netty.channel.DefaultWriteCompletionEvent", e);
      }
  }
}
