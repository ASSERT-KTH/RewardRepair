/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 10 20:02:20 GMT 2019
 */

package com.alibaba.dubbo.rpc.cluster.router.condition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.dubbo.common.URL;
import com.alibaba.dubbo.rpc.Invocation;
import com.alibaba.dubbo.rpc.Invoker;
import com.alibaba.dubbo.rpc.InvokerListener;
import com.alibaba.dubbo.rpc.RpcInvocation;
import com.alibaba.dubbo.rpc.cluster.Router;
import com.alibaba.dubbo.rpc.cluster.router.MockInvokersSelector;
import com.alibaba.dubbo.rpc.cluster.router.condition.ConditionRouter;
import com.alibaba.dubbo.rpc.protocol.InvokerWrapper;
import java.lang.reflect.Array;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConditionRouter_ESTest extends ConditionRouter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[2] = "rule";
      stringArray0[3] = "rule";
      URL uRL0 = new URL(")c$s@]lK<", "rule", 1235, stringArray0);
      URL uRL1 = uRL0.addParameter("rule", (long) 1235);
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL0);
      RpcInvocation rpcInvocation0 = new RpcInvocation();
      LinkedList<Invoker<InvokerListener>> linkedList0 = new LinkedList<Invoker<InvokerListener>>();
      InvokerWrapper<InvokerListener> invokerWrapper0 = new InvokerWrapper<InvokerListener>((Invoker<InvokerListener>) null, uRL1);
      linkedList0.offer(invokerWrapper0);
      List<Invoker<InvokerListener>> list0 = conditionRouter0.route((List<Invoker<InvokerListener>>) linkedList0, uRL1, (Invocation) rpcInvocation0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[2] = "rule";
      stringArray0[3] = "rule";
      URL uRL0 = new URL(")c$s@]lK<", "rule", 1235, stringArray0);
      URL uRL1 = uRL0.setPassword("");
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL0);
      RpcInvocation rpcInvocation0 = new RpcInvocation();
      LinkedList<Invoker<InvokerListener>> linkedList0 = new LinkedList<Invoker<InvokerListener>>();
      InvokerWrapper<InvokerListener> invokerWrapper0 = new InvokerWrapper<InvokerListener>((Invoker<InvokerListener>) null, uRL0);
      linkedList0.add((Invoker<InvokerListener>) invokerWrapper0);
      List<Invoker<InvokerListener>> list0 = conditionRouter0.route((List<Invoker<InvokerListener>>) linkedList0, uRL1, (Invocation) rpcInvocation0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<MockInvokersSelector>[] classArray0 = (Class<MockInvokersSelector>[]) Array.newInstance(Class.class, 5);
      String[] stringArray0 = new String[4];
      stringArray0[2] = "rule";
      stringArray0[3] = "rule";
      URL uRL0 = new URL("%c$s@]lK", "rule", 1235, stringArray0);
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      RpcInvocation rpcInvocation0 = new RpcInvocation("*)5yZjQ", classArray0, classArray0, hashMap0);
      boolean boolean0 = conditionRouter0.matchWhen(uRL0, rpcInvocation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URL uRL0 = URL.valueOf("rule");
      URL uRL1 = uRL0.addParameter("rule", true);
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL1);
      URL uRL2 = conditionRouter0.getUrl();
      assertSame(uRL2, uRL1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "%c$s@]lK";
      stringArray0[2] = "rule";
      stringArray0[3] = "rule";
      URL uRL0 = new URL("%c$s@]lK", "rule", 1235, stringArray0);
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL0);
      int int0 = conditionRouter0.compareTo((Router) conditionRouter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "%c$s@]lK";
      stringArray0[2] = "rule";
      stringArray0[3] = "rule";
      URL uRL0 = new URL("%c$s@]lK", "rule", 1235, stringArray0);
      URL uRL1 = uRL0.addParameter("%c$s@]lK", false);
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL1);
      ConditionRouter conditionRouter1 = new ConditionRouter(uRL0);
      int int0 = conditionRouter1.compareTo((Router) conditionRouter0);
      assertEquals((-64), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConditionRouter conditionRouter0 = null;
      try {
        conditionRouter0 = new ConditionRouter((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.dubbo.rpc.cluster.router.condition.ConditionRouter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[2] = "rule";
      stringArray0[3] = "%c$s@]lK";
      URL uRL0 = new URL("%c$s@]lK", "rule", 1235, stringArray0);
      ConditionRouter conditionRouter0 = null;
      try {
        conditionRouter0 = new ConditionRouter(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URLDecoder: Illegal hex characters in escape (%) pattern - For input string: \"c$\"
         //
         verifyException("java.net.URLDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[2] = "rule";
      stringArray0[3] = "rule";
      URL uRL0 = new URL("%c$s@]lK", "rule", 1235, stringArray0);
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL0);
      // Undeclared exception!
      try { 
        conditionRouter0.compareTo((Router) conditionRouter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockInvokersSelector mockInvokersSelector0 = new MockInvokersSelector();
      String[] stringArray0 = new String[4];
      stringArray0[2] = "rule";
      stringArray0[3] = "rule";
      URL uRL0 = new URL(")c$s@]lK<", "rule", 1235, stringArray0);
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL0);
      int int0 = conditionRouter0.compareTo((Router) mockInvokersSelector0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[4];
      URL uRL0 = new URL("%c$s@]lK", "rule", 1235, stringArray0);
      URL uRL1 = uRL0.addParameter("rule", true);
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL1);
      int int0 = conditionRouter0.compareTo((Router) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[2] = "rule";
      stringArray0[3] = ")c$s@]lK<";
      URL uRL0 = new URL(")c$s@]lK<", "rule", 1235, stringArray0);
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL0);
      RpcInvocation rpcInvocation0 = new RpcInvocation();
      LinkedList<Invoker<InvokerListener>> linkedList0 = new LinkedList<Invoker<InvokerListener>>();
      InvokerWrapper<InvokerListener> invokerWrapper0 = new InvokerWrapper<InvokerListener>((Invoker<InvokerListener>) null, uRL0);
      linkedList0.offer(invokerWrapper0);
      List<Invoker<InvokerListener>> list0 = conditionRouter0.route((List<Invoker<InvokerListener>>) linkedList0, uRL0, (Invocation) rpcInvocation0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[4];
      URL uRL0 = new URL(")c$s@]lK<", "rule", 1235, stringArray0);
      URL uRL1 = uRL0.addParameter("rule", false);
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL1);
      RpcInvocation rpcInvocation0 = new RpcInvocation();
      LinkedList<Invoker<InvokerListener>> linkedList0 = new LinkedList<Invoker<InvokerListener>>();
      InvokerWrapper<InvokerListener> invokerWrapper0 = new InvokerWrapper<InvokerListener>((Invoker<InvokerListener>) null, uRL0);
      linkedList0.offer(invokerWrapper0);
      List<Invoker<InvokerListener>> list0 = conditionRouter0.route((List<Invoker<InvokerListener>>) linkedList0, uRL0, (Invocation) rpcInvocation0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[2] = "rule";
      stringArray0[3] = "rule";
      URL uRL0 = new URL(")c$s@]lK<", "rule", 1235, stringArray0);
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL0);
      RpcInvocation rpcInvocation0 = new RpcInvocation();
      LinkedList<Invoker<InvokerListener>> linkedList0 = new LinkedList<Invoker<InvokerListener>>();
      linkedList0.addFirst((Invoker<InvokerListener>) null);
      // Undeclared exception!
      try { 
        conditionRouter0.route((List<Invoker<InvokerListener>>) linkedList0, uRL0, (Invocation) rpcInvocation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[2] = "rule";
      stringArray0[3] = "rule";
      URL uRL0 = new URL(")c$s@]lK<", "rule", 1235, stringArray0);
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL0);
      RpcInvocation rpcInvocation0 = new RpcInvocation();
      LinkedList<Invoker<InvokerListener>> linkedList0 = new LinkedList<Invoker<InvokerListener>>();
      List<Invoker<InvokerListener>> list0 = conditionRouter0.route((List<Invoker<InvokerListener>>) linkedList0, uRL0, (Invocation) rpcInvocation0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<MockInvokersSelector>[] classArray0 = (Class<MockInvokersSelector>[]) Array.newInstance(Class.class, 5);
      String[] stringArray0 = new String[4];
      stringArray0[2] = "rule";
      stringArray0[3] = "rule";
      URL uRL0 = new URL("%c$s@]lK", "rule", 1235, stringArray0);
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      RpcInvocation rpcInvocation0 = new RpcInvocation("*)5yZjQ", classArray0, classArray0, hashMap0);
      List<Invoker<String>> list0 = conditionRouter0.route((List<Invoker<String>>) null, uRL0, (Invocation) rpcInvocation0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      URL uRL0 = URL.valueOf("1227");
      ConditionRouter conditionRouter0 = null;
      try {
        conditionRouter0 = new ConditionRouter(uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal route rule!
         //
         verifyException("com.alibaba.dubbo.rpc.cluster.router.condition.ConditionRouter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[4];
      URL uRL0 = new URL("%c$s@]lK", "rule", 1235, stringArray0);
      URL uRL1 = uRL0.addParameter("rule", true);
      ConditionRouter conditionRouter0 = new ConditionRouter(uRL1);
      URL uRL2 = conditionRouter0.getUrl();
      assertNotSame(uRL0, uRL2);
  }
}
